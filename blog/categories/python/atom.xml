<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | James's Blog]]></title>
  <link href="http://j-wang.net/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://j-wang.net/"/>
  <updated>2014-01-31T02:46:52-08:00</updated>
  <id>http://j-wang.net/</id>
  <author>
    <name><![CDATA[James Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DBF to SQL]]></title>
    <link href="http://j-wang.net/blog/2013/07/18/dbf-to-sql/"/>
    <updated>2013-07-18T14:42:00-07:00</updated>
    <id>http://j-wang.net/blog/2013/07/18/dbf-to-sql</id>
    <content type="html"><![CDATA[<p>This is a somewhat less exciting project and announcement, but I put together a utility that helps translate Foxpro DBF to SQLite. In case you don&rsquo;t recognize the word Foxpro, it&rsquo;s a Microsoft DBMS whose final version was released over five years ago (and whose heyday was nearly two decades ago). WomensTrust has a database that I&rsquo;ll be getting a hold of soon, and I wanted to actually be able to use modern tools to work with the data instead of having it trapped in a sunsetted technology. I tested it on a sample database, and it works fine, if a bit messily. It&rsquo;s directly reading and processing the data in the DBF tables. It tried to preserve the format and structure of the tables, but it&rsquo;s not perfect.</p>

<p>I haven&rsquo;t tested the script with any other dialects of SQL, but since I&rsquo;m just gluing together a Python dbf library and SQLAlchemy, it should require minimal effort to adapt it (though once you&rsquo;ve translated DBF to SQLite, there are far better tools available for getting it into other dialects of SQL). The code is <a href="https://github.com/j-wang/dbf_to_sql">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun with Python For Loops]]></title>
    <link href="http://j-wang.net/blog/2013/07/12/fun-with-python-for-loops/"/>
    <updated>2013-07-12T13:07:00-07:00</updated>
    <id>http://j-wang.net/blog/2013/07/12/fun-with-python-for-loops</id>
    <content type="html"><![CDATA[<p>As mentioned in my <a href="/blog/2013/07/10/lambda-calculus-interpreter-and-benefits-of-ugliness/">last post</a>, while working on a lambda calculus interpreter, I encountered an issue where I wanted to skip ahead in a <em>for</em> loop, but found that I couldn&rsquo;t. Although I initially put it aside, when I was getting a code review on the interpreter from Tom, I remembered the issue again and did some further investigation on the topic.<!-- more --></p>

<h2>Reassigning the Index Variable</h2>

<p>It turns out that unlike <em>for</em> loops in Java or C++, the index variable (e.g. <code>i</code> in <code>for (int i = 0; i &lt; 10; i++)</code> is drawn directly from the object following the <code>in</code> keyword each time the <em>for</em> loop goes around. As such, changing what the index <code>i</code> references in the equivalent Python loop <code>for i in range(10)</code> won&rsquo;t affect the next round of the <em>for</em> loop (though it will affect anything following the reassignment in the block).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">i</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The above code results in:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Reassigning the Iterable Variable</h2>

<p>Additionally, after you provide Python with an initial reference to an object with an iterable method in a <em>for</em> loop, Python accesses the object directly without referring back to the reference variable passed into the <em>for</em> loop. So, what does this mean? Well, it means that you can&rsquo;t reassign the <em>for</em> loop&rsquo;s iterable object in the middle of a <em>for</em> loop.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">i</span>
</span><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3000</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The above code, despite reassignment of <code>iter_this</code> results in:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So, does this mean that you can&rsquo;t do anything to modify what a <em>for</em> loop ranges over once you&rsquo;ve started it? Nope. Although Python accesses the iterable object directly without regards to what your reference subsequently points to, something else can also access that iterable object &mdash; specifically, the reference that you originally used to direct Python to that object.</p>

<h2>Mutating the Iterable Object</h2>

<p>Since you have a reference to the Python object itself, you can actually change the object that is being iterated over by the <em>for</em> loop from right under it. Essentially instead of reassigning the object&rsquo;s reference, you can change the object itself, i.e. mutate it.</p>

<p>We know what the below code does:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">i</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>However, this does something different:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">i</span>
</span><span class='line'><span class="n">iter_this</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So what happened? Well, let&rsquo;s take a closer look:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">print</span> <span class="s">&quot;iter: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;pop!: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">iter_this</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">iter_this</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">iter_this</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iter: 0
</span><span class='line'>pop!: 4
</span><span class='line'>iter: 1
</span><span class='line'>pop!: 3
</span><span class='line'>iter: 2
</span><span class='line'>pop!: 2
</span><span class='line'>iter_this: [0, 1]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As the <em>for</em> loop iterates through the list created by the <code>range</code> function, we mutate the list by popping off its last element at the end of each <em>for</em> loop round. Hence, the list that the <em>for</em> loop is drawing from is getting shorter as the <em>for</em> loop lists, resulting in the <em>for</em> loop ending early.</p>

<p>This means that if you need to skip elements in a <em>for</em> loop, you can certainly mutate the iterable object. However, just because you can doesn&rsquo;t mean you necessarily should. Mutation will often cause the <em>for</em> loop to become a lot less straightforward to reason about and may end up creating strange and confusing bugs.</p>

<h2>Other Ways to Skip Around a Loop</h2>

<p>One way of skipping elements in a loop that isn&rsquo;t quite as opaque is by explicitly creating another variable that can be modified and <code>continue</code>ing when the elements in the iterable are less than (or greater than, or whatever) than the modifiable variable.</p>

<p>This method is what I ultimately settled on for parts of my lambda calculus interpreter that needed to skip elements. It made sense since my <em>for</em> loop skipping would always be in the forward direction (I would never need to backtrack in my <em>for</em> loop) and this makes it crystal clear what I&rsquo;m doing.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">skip_while_less</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">skip_while_less</span><span class="p">:</span>
</span><span class='line'>    <span class="k">continue</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span>
</span><span class='line'>    <span class="n">skip_while_less</span> <span class="o">+=</span> <span class="mi">3</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>3
</span><span class='line'>6
</span><span class='line'>9</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>On the other hand, if you need to skip around a loop (backwards as well as forwards), it is probably better (and clearer) to just use a while loop.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">end</span> <span class="o">=</span> <span class="mi">12</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">while</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">end</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">i</span>
</span><span class='line'><span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">*=</span> <span class="mi">4</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2
</span><span class='line'>1
</span><span class='line'>4
</span><span class='line'>3
</span><span class='line'>12
</span><span class='line'>11</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lambda Calculus Interpreter and Benefits of Ugliness]]></title>
    <link href="http://j-wang.net/blog/2013/07/10/lambda-calculus-interpreter-and-benefits-of-ugliness/"/>
    <updated>2013-07-10T23:19:00-07:00</updated>
    <id>http://j-wang.net/blog/2013/07/10/lambda-calculus-interpreter-and-benefits-of-ugliness</id>
    <content type="html"><![CDATA[<p>For the past week, I&rsquo;ve been working on a lambda calculus interpreter (<a href="https://github.com/j-wang/untyped-lambda-calculus-interpreter">Github</a>) in order to try to better understand the concepts in lambda calculus. It&rsquo;s been a great experience, especially since I&rsquo;ve been coding it in Python. Normally, if I were writing the interpreter in a language like SML or Haskell, I would rely heavily on pattern-matching.</p>

<p>Using pattern-matching is a pretty natural fit for creating an interpreter, given the operations involved in lexing, parsing, and reduction/evaluation &mdash; specifically, handling a particular encountered block depending on the token or keyword/structure encountered.<!-- more --> An example of this idea implemented in a Haskell lexer is below:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">lexer</span> <span class="ow">::</span> <span class="kt">String</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
</span><span class='line'><span class="nf">lexer</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">lexer</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kr">case</span> <span class="n">x</span> <span class="kr">of</span>
</span><span class='line'>  <span class="sc">&#39;(&#39;</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s">&quot;(&quot;</span> <span class="kt">:</span> <span class="n">lexer</span> <span class="n">xs</span>
</span><span class='line'>  <span class="sc">&#39;)&#39;</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s">&quot;)&quot;</span> <span class="kt">:</span> <span class="n">lexer</span> <span class="n">xs</span>
</span><span class='line'>  <span class="sc">&#39;.&#39;</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s">&quot;.&quot;</span> <span class="kt">:</span> <span class="n">lexer</span> <span class="n">xs</span>
</span><span class='line'>  <span class="sc">&#39; &#39;</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">lexer</span> <span class="n">xs</span>
</span><span class='line'>  <span class="kr">_</span>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kr">let</span> <span class="n">chunkWord</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'>             <span class="n">chunkWord</span> <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span><span class="p">)</span> <span class="ow">=</span>
</span><span class='line'>                 <span class="kr">case</span> <span class="n">y</span> <span class="kr">of</span>
</span><span class='line'>                   <span class="sc">&#39; &#39;</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kt">[]</span>
</span><span class='line'>                   <span class="sc">&#39;)&#39;</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kt">[]</span>
</span><span class='line'>                   <span class="sc">&#39;.&#39;</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kt">[]</span>
</span><span class='line'>                   <span class="kr">_</span>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">y</span> <span class="kt">:</span> <span class="n">chunkWord</span> <span class="n">ys</span>
</span><span class='line'>             <span class="n">word</span> <span class="ow">=</span> <span class="n">chunkWord</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span>
</span><span class='line'>         <span class="kr">in</span> <span class="n">word</span> <span class="kt">:</span> <span class="p">(</span><span class="n">lexer</span> <span class="o">$</span> <span class="n">drop</span> <span class="p">(</span><span class="n">length</span> <span class="n">word</span><span class="p">)</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The lexer takes a string and iterates through it character by character. Each character encountered has specified a certain action (even if the actions are simple in this case). A <code>'('</code> character produces the action of creating a cons list of the string <code>"("</code> and the result of lexer on the rest of the string. An analogous action happens for <code>')'</code>, <code>'.'</code>, and <code>' '</code>. For anything else (which has to then be a keyword or variable in lambda calculus), chunk it together as a string and cons it onto the rest of the the string (sans chunked string). It&rsquo;s not bad, though I imagine I&rsquo;d probably be able to write this in an even more concise way if I knew Haskell better.</p>

<p>If I were to translate this code literally to Python, I would enter <code>elif</code> hell, since Python has neither pattern matching or even case expressions. Although beauty is in the eye of the beholder, a massive block of <code>elif</code>s is not what I consider beautiful code. For such a small codeblock, it isn&rsquo;t too bad, but even so, it looks verbose when in Python.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Lexer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@classmethod</span>
</span><span class='line'><span class="k">def</span> <span class="nf">tokenize</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">string</span><span class="p">):</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">first_letter</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">char</span> <span class="o">==</span> <span class="s">&#39;(&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>            <span class="n">first_letter</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">char</span> <span class="o">==</span> <span class="s">&#39;)&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>            <span class="n">first_letter</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">char</span> <span class="o">==</span> <span class="s">&#39;.&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">char</span> <span class="o">==</span> <span class="s">&#39; &#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">first_letter</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">first_letter</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>                <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>                <span class="n">first_letter</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">result</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">char</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Again, it&rsquo;s not <em>that</em> bad, given how short the set of cases there are here (I&rsquo;ll have to actually find a longer interpreter to give a properly horrifying example). In fact, taking into account the <code>chunkWord</code> gymnastics I had to do in Haskell to satisfy the type checker (though that might just be due to my ignorance in Haskell), it might even look nicer to some (&hellip; aside from the <code>first_letter</code> gymnastics required here because you can&rsquo;t easily skip ahead characters in a Python <code>for</code> loop&hellip; a topic for another post). However, even here the specific case pattern looks annoyingly verbose and repetitive, at least to my eyes. <code>elif</code>s takes up two lines at minimum and starts to blur together with many, many <code>elif</code> statements. Alternatively, <code>elif</code> blocks start turning into spaghetti code if you opt for using a dictionary to handle each case, with the instructions for each case separated from conditional statements themselves, especially if you have to define the operations as functions separate from the dictionary.</p>

<p>However, this type of ugliness does comes with an advantage when trying a learn a concept. The Haskell version actually has a lot of code repetition which is made tolerable and even pleasant through pattern-matching. Being forced to think more cleverly about how to express one&rsquo;s ideas in a succinct way to counter that ugliness can give one deeper insight into what&rsquo;s actually going on. For example, the below code more explicitly acknowledges the code repetition and handles the <code>for</code> skipping-ahead challenge in a cleaner way (to my eyes), by accumulating characters when the current character is not one of the special delimiters and clearing it when it reaches one of those delimiters.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Lexer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@classmethod</span>
</span><span class='line'><span class="k">def</span> <span class="nf">tokenize</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">string</span><span class="p">):</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">char</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&#39;(&#39;</span><span class="p">,</span> <span class="s">&#39;)&#39;</span><span class="p">,</span> <span class="s">&#39;.&#39;</span><span class="p">,</span> <span class="s">&#39; &#39;</span><span class="p">]:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">temp</span> <span class="o">!=</span> <span class="s">&#39;&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
</span><span class='line'>                <span class="n">temp</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">char</span> <span class="o">!=</span> <span class="s">&#39; &#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">+</span> <span class="n">char</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">temp</span> <span class="o">!=</span> <span class="s">&#39;&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Even though this can probably also be improved upon, being forced to think harder and attack the problem with multiple paradigms was helpful. The fact that Python is not great at handling multiple cases in a neat, clean way was actually beneficial for my understanding in this case. Given this experience, I think it might be helpful in the future to try to solve hard programming problems in languages that really don&rsquo;t have good support for paradigms that these problems are most naturally expressed in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AI for Tic-Tac-Toe]]></title>
    <link href="http://j-wang.net/blog/2013/06/21/ai-for-tic-tac-toe/"/>
    <updated>2013-06-21T20:28:00-07:00</updated>
    <id>http://j-wang.net/blog/2013/06/21/ai-for-tic-tac-toe</id>
    <content type="html"><![CDATA[<p>As part of my Hacker School application, I wrote a simple <a href="https://github.com/j-wang/hacker-school/blob/master/tictactoe.py">Tic-Tac-Toe application</a> for my &ldquo;program written from scratch.&rdquo; My choice was driven primarily by the fact that the application itself suggested a Tic-Tac-Toe application. As such, I expected many other people would write Tic-Tac-Toe (I was very right in this regard) and wanted to do something unique. My original ambitious plan was to write an AI for it. Unfortunately, I had to quickly abandon this plan, since I realized 1) I had no idea how I would go about creating one, and 2) I didn&rsquo;t have enough time to figure it out before the application was due. As such, I had to settle for infinitely expandable Tic-Tac-Toe (theoretically anyway &mdash; at greater than 15 x 15, it becomes quite visually ugly).</p>

<p>Now that I do have the time, I definitely wanted to tackle writing an AI for Tic-Tac-Toe. However, I didn&rsquo;t want to just find and apply an algorithm. I wanted to have the full challenge and experience of working through how one would create an AI.<!-- more --></p>

<p>My basic idea for an AI was that it would play out possible future moves and pick the one that resulted in the best outcome for itself. Of course, the trick is how one calculates &ldquo;best outcome.&rdquo;</p>

<p>My first attempt involved counting the number of ways that a player could win vs. the number of ways an opponent could win and using this as the critera for determining the best next move. The main reason I decided to go this direction was simplicity of implementation: I had already implemented a complicated tallying/coordinate system in my Tic-Tac-Toe game&rsquo;s <code>Grid</code> class that I thought I could commandeer for this purposes. It also let me calculate best next moves for intermediate game-states, which appealed to me for implementing difficulty levels. The naive version of this method didn&rsquo;t work (the algorithm ignored one-move wins, preferring many ways to win over just winning), so I tried ramping up the value of a win to sys.maxint and penalizing longer chains to victory. Below, I show the primary logic behind the AI (full code is on <a href="https://github.com/j-wang/tictactoe_ai">Github</a>).</p>

<p>The basic algorithm involved is iterative recursive, which is a pattern that I&rsquo;m finding I like a lot in Python. Iteratively traverse all cells of the grid (breadth):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">traverse</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">XO</span><span class="p">,</span> <span class="n">move_acc</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">open_cells</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_open_cells</span><span class="p">(</span><span class="n">grid</span><span class="o">.</span><span class="n">cells</span><span class="p">)</span>
</span><span class='line'><span class="n">dig_outcomes</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">cell</span> <span class="ow">in</span> <span class="n">open_cells</span><span class="p">:</span>
</span><span class='line'>    <span class="n">dig_outcomes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dig</span><span class="p">(</span><span class="n">cell</span><span class="p">,</span> <span class="n">grid</span><span class="p">,</span> <span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">XO</span><span class="p">,</span> <span class="n">move_acc</span><span class="p">))</span>
</span><span class='line'><span class="n">solution</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dig_outcomes</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="k">return</span> <span class="n">solution</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And then recursively &ldquo;dig&rdquo; into each of these cells by simulating the player whose simulated turn it was moving there on a deepcopied <code>Grid</code> (depth).</p>

<p>The complicated code below (difficult to read mainly because it builds off of elements of the <code>Grid</code> class that I never exposed or expected to expose) shows the digging. It returns a tuple with win-loss &ldquo;scores&rdquo;, and the moves it took to reach that outcome. The &ldquo;scores&rdquo; are actually a pair of scores: the first is based on the outcome (win/loss/tie &mdash; though wins with fewer moves are given higher scores) and the second is based on how many more ways the AI could have won (and how close it was) vs. the player. Since many outcomes can be the same (win in same number of moves), I use the relative number of paths and closeness to victory as a tiebreaker.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">dig</span><span class="p">(</span><span class="n">move</span><span class="p">,</span> <span class="n">grid</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">XO</span><span class="p">,</span> <span class="n">move_acc</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">depth</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">grid</span><span class="o">.</span><span class="n">winner</span><span class="p">():</span>
</span><span class='line'>    <span class="n">win_flag</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">grid</span><span class="o">.</span><span class="n">winner</span><span class="p">()</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">_XO</span><span class="p">:</span>
</span><span class='line'>        <span class="n">win_flag</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">maxint</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">move_acc</span><span class="p">)</span>  <span class="c"># short wins best</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">grid</span><span class="o">.</span><span class="n">winner</span><span class="p">()</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">_flip_player</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_XO</span><span class="p">):</span>
</span><span class='line'>        <span class="n">win_flag</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>  <span class="c"># losses are worst</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># remember that victory_routes are centered around 0</span>
</span><span class='line'>    <span class="n">adj_victory_route</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">_multiplier</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">grid</span><span class="o">.</span><span class="n">_victory_routes</span><span class="p">)</span>
</span><span class='line'>    <span class="n">opponent_closeness</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">adj_victory_route</span><span class="p">)</span>
</span><span class='line'>    <span class="n">opponent_ways</span> <span class="o">=</span> <span class="n">adj_victory_route</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">opponent_closeness</span><span class="p">)</span>
</span><span class='line'>    <span class="n">player_closeness</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">adj_victory_route</span><span class="p">)</span>
</span><span class='line'>    <span class="n">player_ways</span> <span class="o">=</span> <span class="n">adj_victory_route</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">player_closeness</span><span class="p">)</span>
</span><span class='line'>    <span class="n">diff</span> <span class="o">=</span> <span class="p">(</span><span class="n">player_closeness</span> <span class="o">*</span> <span class="n">player_ways</span> <span class="o">+</span>
</span><span class='line'>            <span class="n">opponent_closeness</span> <span class="o">*</span> <span class="n">opponent_ways</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">((</span><span class="n">win_flag</span><span class="p">,</span> <span class="n">diff</span><span class="p">),</span> <span class="n">move_acc</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">new_grid</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_moves</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">move_acc</span><span class="p">)</span>
</span><span class='line'>    <span class="n">r</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">move</span>
</span><span class='line'>    <span class="n">new_grid</span><span class="o">.</span><span class="n">fill_cell</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">XO</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_moves</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">move</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">traverse</span><span class="p">(</span><span class="n">new_grid</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_flip_player</span><span class="p">(</span><span class="n">XO</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">new_moves</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This kind of worked. The AI very often made the &ldquo;right&rdquo; move, but sometimes did stupid things. I&rsquo;m pretty sure it was because I just multiplied together closeness to victory and ways to victory naively (implicitly weighting sure victories the same as many possible, but unlikely victories). I could have refined this further, and I still think there is some value to a path like this, since I can actually create more or less smart AIs by this method, but it would have taken much more trial-and-error tweaking of how I weighted various factors. The bigger problem was acutally that it was too slow &mdash; turns out copying huge <code>Grid</code> objects over and over again down an entire tree of possible outcomes is really slow. Who would have thunk it? I didn&rsquo;t want to reimplement all of the logic I created to track number of ways to win, so I decided to go down a different route.</p>

<p>One thing I realized was that I didn&rsquo;t have to track <em>every</em> move. I just needed to track the opponent&rsquo;s <em>best</em> moves and my AI&rsquo;s responses to those moves. Now, what about best? As said, I didn&rsquo;t want to reimplement a bunch of <code>Grid</code>&rsquo;s logic. If I gave up the idea of intermediate scoring, I could just determine the best move (for either player) by the one that ultimately resulted in victory at the last move&hellip; and then recursively choose the moves that give each player a better chance of victory all the way up the chain. I didn&rsquo;t quite realize it until I talked to other fellow Hacker Schoolers, but in trying to not reimplement a bunch of victory logic, I appeared to have reinvented a form of the mini-max algorithm. It&rsquo;s also much shorter and cleaner (called <code>LeanComputerPlayer</code> in the Github code).</p>

<p>The new iterative breadth traversal (the board is now just a flattened list representation of the board, e.g. 0th element is the top left cell, 4th element is the center cell) using a list comprehension:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">descendants</span><span class="p">(</span><span class="n">moves</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">player</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">copy_ret</span><span class="p">(</span><span class="n">brd</span><span class="p">,</span> <span class="n">mv</span><span class="p">,</span> <span class="n">plyr</span><span class="p">):</span>
</span><span class='line'>    <span class="n">new_board</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_board</span><span class="p">[</span><span class="n">mv</span><span class="p">]</span> <span class="o">=</span> <span class="n">plyr</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new_board</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="p">[</span><span class="n">solve_tree</span><span class="p">(</span><span class="n">copy_ret</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">mv</span><span class="p">,</span> <span class="n">player</span><span class="p">),</span> <span class="n">flip</span><span class="p">(</span><span class="n">player</span><span class="p">),</span> <span class="n">mv</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">mv</span> <span class="ow">in</span> <span class="n">moves</span><span class="p">]</span>  <span class="c"># flip just switches players</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And the new recursive depth/comparison function, which sums up 1s for AI wins and -1s for human wins. It chooses max ultimate win outcomes if player is AI, choose min if player is human &mdash; since the game is played to its end conditions, these are perfect inverses of one another:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">solve_tree</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">player</span><span class="p">,</span> <span class="n">move</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">moves</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_pos_moves</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'><span class="n">winner</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_winner</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">moves</span> <span class="o">==</span> <span class="p">[]</span> <span class="ow">or</span> <span class="n">winner</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">winner</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">outcome_val</span><span class="p">[</span><span class="n">winner</span><span class="p">],</span> <span class="n">move</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_draw_value</span><span class="p">,</span> <span class="n">move</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">results</span> <span class="o">=</span> <span class="n">descendants</span><span class="p">(</span><span class="n">moves</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">player</span><span class="p">)</span>
</span><span class='line'>    <span class="n">min_or_max</span> <span class="o">=</span> <span class="nb">max</span> <span class="k">if</span> <span class="n">player</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">XO</span> <span class="k">else</span> <span class="nb">min</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">min_or_max</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">move</span> <span class="k">if</span> <span class="n">move</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These two are helper functions within the <code>next_move</code> method in <code>LeanComputerPlayer</code>. They are kicked off by the last line in the method:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">return</span> <span class="n">solve_tree</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_board</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">XO</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And it works (AI always wins or ties) and it&rsquo;s fast! The one optimization I made after this was to have the AI automatically pick the middle cell at the beginning of the game. Since traversing down the entire tree is an operation that takes n! steps where n is the number of starting cells (9 possible moves, with 8 possible next moves for each of the 9 starting moves, and then 7 moves for each of the 8 moves&hellip; and so on), calculating the first move is much slower than subsequent moves (9! moves to check vs. 8! which is 362,880 moves vs. 40,320) and also pointless since if the AI has the first move, we know the center cell is always the optimal solution. Again, this code is on <a href="https://github.com/j-wang/tictactoe_ai">Github</a>.</p>

<p>And thus, week three ends! I&rsquo;m looking forward to week four though at the moment, I don&rsquo;t quite know what I&rsquo;ll turn to next.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faces Game Web App]]></title>
    <link href="http://j-wang.net/blog/2013/06/14/faces-game-web-app/"/>
    <updated>2013-06-14T19:09:00-07:00</updated>
    <id>http://j-wang.net/blog/2013/06/14/faces-game-web-app</id>
    <content type="html"><![CDATA[<p>Last week, while working on my <a href="/blog/2013/06/07/first-project-simple-text-editor/">simple text editor</a>, I chatted with fellow Hacker Schoolers about what was actually being used in the industry nowadays for GUIs. The answer I most commonly heard was that the tech world had largely moved on to web (and mobile) apps. No one who I spoke to actually worked on desktop applications. The insight here is quite fascinating to me.</p>

<p>Developers and users are a chicken-and-egg problem. To get developers to work on a platform, you need users. To have users, you need a strong developer base that creates appealing and useful apps. It&rsquo;s a small sample set, but the lopsided nature of the sentiments suggest to me that either developers have a stronger lean towards web than users or the companies that work in web are much more interesting/appealing to the strong programmers that Hacker School selects for and attracts. Again, it&rsquo;s too small a sample set to draw sweeping conclusions, but it is an interesting data point. Nevertheless, these conversations helped point me to my next project: a web app.<!-- more --></p>

<p>I&rsquo;ve built static websites and played around with content management systems (CMS) like Wordpress in the past. In doing so, I&rsquo;ve played around with HTML and CSS. However, those have mainly been exercises of graphical tweaking. I&rsquo;ve never built a web app (dynamic content) before, which requires more understanding of how web sites serve content (requests and responses), knowledge of server/user data management (persistent storage and sessions/cookies), and at least a basic understanding of concurrency &mdash; though web frameworks largely abstract away the latter.</p>

<p>At the beginning of the week, I spent many productive hours working through tutorials and many less productive hours thinking about what web app to create and what language to write it in. I ended up defaulting to Python, since like last time my current goal is to focus on this area topic and not languages. In terms of web frameworks, a fellow batch-mate, <a href="http://skien.cc/">Erik</a>, suggested that I look at <a href="http://flask.pocoo.org/">Flask</a>, whose lightweight nature immediately appealed to me. For what I needed it for, it has easy-to-understand and extremely simple routing and templating functionality. There&rsquo;s still some magic in routing, but I&rsquo;m not quite prepared to write my own web framework and create HTML request-handling/responses myself quite yet.</p>

<p>Finally, I decided to create a &ldquo;Faces Game,&rdquo; based on a project from a prior batch. There was some demand for an updated version including our batch, and it had all of the elements I wanted: dynamic content, (minor) data management, login handling (since I wanted to restrict it to Hacker Schoolers), scraping (I wanted to dynamically retrieve information from the Hacker School website for posterity), and processing/handling scraped data. The code is on <a href="https://github.com/j-wang/faces-game">Github</a> and the app is live on <a href="https://enigmatic-hollows-9840.herokuapp.com/">Heroku</a>. There are definitely many improvements I can make to it: multiple difficulty levels, free-form responses, caching, OAuth vs. mechanize login, etc. but it served its learning purpose. I learned a lot about what HTML requests/responses contain, HTML GET and POST methods, how form data works, how HTML templates work, and how web servers work (along with, of course, a refresher on writing HTML/CSS). Given that these topics are non-specific to Python and Flask, post-project I found that I could helpfully pair with several other Hacker Schoolers on their web apps (whether they were Python/Flask or not). Although I&rsquo;m probably done with this web app, given their importance/prevalence I&rsquo;ll probably be revisiting web apps again in the future.</p>

<p>Only Hacker Schoolers can play the game, but screenshots from it are below.</p>

<h2>Login Screen</h2>

<p>Takes a username and password, which my scraper (built without preexisting scraper/spider libraries) uses to login into the Hacker School website for the user session.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/posts/faces_game_login.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>

<h2>Batch Selection</h2>

<p>These batches are dynamically scraped from the Hacker School website, which means that this will automatically handle future batches.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/posts/faces_game_select_batch.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>

<h2>Guessing Screen</h2>

<p>This screen shows random Hacker Schooler, with the correct name somewhere in the list of five other names (drawn randomly from the same batch) below.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/posts/faces_game_guess.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>

<h2>Result Screen</h2>

<p>Shows whether or not the user correctly answered, the name of the Hacker Schooler, and his or her listed skills on the Hacker School website.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/posts/faces_game_after_guess.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>
]]></content>
  </entry>
  
</feed>
