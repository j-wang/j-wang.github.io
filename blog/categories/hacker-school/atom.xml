<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacker school | James's Blog]]></title>
  <link href="http://j-wang.net/blog/categories/hacker-school/atom.xml" rel="self"/>
  <link href="http://j-wang.net/"/>
  <updated>2013-08-05T14:56:15-04:00</updated>
  <id>http://j-wang.net/</id>
  <author>
    <name><![CDATA[James Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DBF to SQL]]></title>
    <link href="http://j-wang.net/blog/2013/07/18/dbf-to-sql/"/>
    <updated>2013-07-18T14:42:00-04:00</updated>
    <id>http://j-wang.net/blog/2013/07/18/dbf-to-sql</id>
    <content type="html"><![CDATA[<p>This is a somewhat less exciting project and announcement, but I put together a utility that helps translate Foxpro DBF to SQLite. In case you don&rsquo;t recognize the word Foxpro, it&rsquo;s a Microsoft DBMS whose final version was released over five years ago (and whose heyday was nearly two decades ago). WomensTrust has a database that I&rsquo;ll be getting a hold of soon, and I wanted to actually be able to use modern tools to work with the data instead of having it trapped in a sunsetted technology. I tested it on a sample database, and it works fine, if a bit messily. It&rsquo;s directly reading and processing the data in the DBF tables. It tried to preserve the format and structure of the tables, but it&rsquo;s not perfect.</p>

<p>I haven&rsquo;t tested the script with any other dialects of SQL, but since I&rsquo;m just gluing together a Python dbf library and SQLAlchemy, it should require minimal effort to adapt it (though once you&rsquo;ve translated DBF to SQLite, there are far better tools available for getting it into other dialects of SQL). The code is <a href="https://github.com/j-wang/dbf_to_sql">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun with Python For Loops]]></title>
    <link href="http://j-wang.net/blog/2013/07/12/fun-with-python-for-loops/"/>
    <updated>2013-07-12T13:07:00-04:00</updated>
    <id>http://j-wang.net/blog/2013/07/12/fun-with-python-for-loops</id>
    <content type="html"><![CDATA[<p>As mentioned in my <a href="/blog/2013/07/10/lambda-calculus-interpreter-and-benefits-of-ugliness/">last post</a>, while working on a lambda calculus interpreter, I encountered an issue where I wanted to skip ahead in a <em>for</em> loop, but found that I couldn&rsquo;t. Although I initially put it aside, when I was getting a code review on the interpreter from Tom, I remembered the issue again and did some further investigation on the topic.<!-- more --></p>

<h2>Reassigning the Index Variable</h2>

<p>It turns out that unlike <em>for</em> loops in Java or C++, the index variable (e.g. <code>i</code> in <code>for (int i = 0; i &lt; 10; i++)</code> is drawn directly from the object following the <code>in</code> keyword each time the <em>for</em> loop goes around. As such, changing what the index <code>i</code> references in the equivalent Python loop <code>for i in range(10)</code> won&rsquo;t affect the next round of the <em>for</em> loop (though it will affect anything following the reassignment in the block).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">i</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The above code results in:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Reassigning the Iterable Variable</h2>

<p>Additionally, after you provide Python with an initial reference to an object with an iterable method in a <em>for</em> loop, Python accesses the object directly without referring back to the reference variable passed into the <em>for</em> loop. So, what does this mean? Well, it means that you can&rsquo;t reassign the <em>for</em> loop&rsquo;s iterable object in the middle of a <em>for</em> loop.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">i</span>
</span><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3000</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The above code, despite reassignment of <code>iter_this</code> results in:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So, does this mean that you can&rsquo;t do anything to modify what a <em>for</em> loop ranges over once you&rsquo;ve started it? Nope. Although Python accesses the iterable object directly without regards to what your reference subsequently points to, something else can also access that iterable object &mdash; specifically, the reference that you originally used to direct Python to that object.</p>

<h2>Mutating the Iterable Object</h2>

<p>Since you have a reference to the Python object itself, you can actually change the object that is being iterated over by the <em>for</em> loop from right under it. Essentially instead of reassigning the object&rsquo;s reference, you can change the object itself, i.e. mutate it.</p>

<p>We know what the below code does:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">i</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>However, this does something different:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">i</span>
</span><span class='line'><span class="n">iter_this</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So what happened? Well, let&rsquo;s take a closer look:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">print</span> <span class="s">&quot;iter: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;pop!: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">iter_this</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">iter_this</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">iter_this</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iter: 0
</span><span class='line'>pop!: 4
</span><span class='line'>iter: 1
</span><span class='line'>pop!: 3
</span><span class='line'>iter: 2
</span><span class='line'>pop!: 2
</span><span class='line'>iter_this: [0, 1]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As the <em>for</em> loop iterates through the list created by the <code>range</code> function, we mutate the list by popping off its last element at the end of each <em>for</em> loop round. Hence, the list that the <em>for</em> loop is drawing from is getting shorter as the <em>for</em> loop lists, resulting in the <em>for</em> loop ending early.</p>

<p>This means that if you need to skip elements in a <em>for</em> loop, you can certainly mutate the iterable object. However, just because you can doesn&rsquo;t mean you necessarily should. Mutation will often cause the <em>for</em> loop to become a lot less straightforward to reason about and may end up creating strange and confusing bugs.</p>

<h2>Other Ways to Skip Around a Loop</h2>

<p>One way of skipping elements in a loop that isn&rsquo;t quite as opaque is by explicitly creating another variable that can be modified and <code>continue</code>ing when the elements in the iterable are less than (or greater than, or whatever) than the modifiable variable.</p>

<p>This method is what I ultimately settled on for parts of my lambda calculus interpreter that needed to skip elements. It made sense since my <em>for</em> loop skipping would always be in the forward direction (I would never need to backtrack in my <em>for</em> loop) and this makes it crystal clear what I&rsquo;m doing.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">skip_while_less</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">skip_while_less</span><span class="p">:</span>
</span><span class='line'>    <span class="k">continue</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span>
</span><span class='line'>    <span class="n">skip_while_less</span> <span class="o">+=</span> <span class="mi">3</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>3
</span><span class='line'>6
</span><span class='line'>9</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>On the other hand, if you need to skip around a loop (backwards as well as forwards), it is probably better (and clearer) to just use a while loop.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">end</span> <span class="o">=</span> <span class="mi">12</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">while</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">end</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">i</span>
</span><span class='line'><span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">*=</span> <span class="mi">4</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2
</span><span class='line'>1
</span><span class='line'>4
</span><span class='line'>3
</span><span class='line'>12
</span><span class='line'>11</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Activity Log: Jun 21st - 28th]]></title>
    <link href="http://j-wang.net/blog/2013/06/30/hacker-school-activity-log-jun-21st-28th/"/>
    <updated>2013-06-30T23:50:00-04:00</updated>
    <id>http://j-wang.net/blog/2013/06/30/hacker-school-activity-log-jun-21st-28th</id>
    <content type="html"><![CDATA[<p>I only started this log last week, but figured it would be helpful to start tracking more of what I do at Hacker School, apart from my bigger projects. As a side benefit, it might give some of the people who have asked me what I&rsquo;m doing at Hacker School some insight into what a typical day might be like &mdash; though do keep in mind I&rsquo;ve likely not captured literally every single thing and this particular week was more chaotic and scattered than average.</p>

<p>This is more of an experimental idea right now, but if it works out well, I&rsquo;ll try to post these at the end of each week.</p>

<!-- more -->


<h2>21 Jun 2013</h2>

<ul>
<li>Completed TicTacToe AI with real minimax in Python; always wins or ties. I previously created one that used a depth-based weighting system (the fewer moves it takes to reach a win/loss state and get close to a victory, the higher the &ldquo;score&rdquo;), but it sometimes did stupid things. To be fair, it didn&rsquo;t do stupid things that often, but considering the game is solvable, I figured I might as well solve it.  <a href="https://github.com/j-wang/tictactoe_ai">Link to github repo here.</a></li>
<li>Set up Haskell for emacs (haskell-mode and scion); installed cabal and hlint. Typical setup for a new language.</li>
<li>Reviewed Haskell <a href="http://www.haskell.org/haskellwiki/Programming_guidelines">style guide</a>. Style guides are one of the first things I look at in a new language &mdash; it helps me get a flavor of what good code looks like, often informs me about some of the language&rsquo;s quirks, and usually tells me something about what is efficient or not in the language.</li>
<li>Wrote first simple program in Haskell (along the lines of simple sum functions and &ldquo;hello world&rdquo; type of things &mdash; I didn&rsquo;t bother to push it to github).</li>
<li>I&rsquo;m trying to wrap head around monads, though am largely failing. Some of the links I perused. <a href="http://www.haskell.org/haskellwiki/Monad">Haskell wiki page on monads.</a> <a href="http://www.haskell.org/haskellwiki/Do_notation_considered_harmful">&ldquo;Do notation considered harmful.&rdquo;</a> <a href="http://www.haskell.org/haskellwiki/Monad_laws">Monad laws.</a></li>
<li>Talked with Martin. After our conversation and playing around with the concept in SML, I grasp it a lot better. <code>&gt;&gt;=</code> is essentially a pipeline of actions, allowing access to wrapped value to execute&hellip; largely arbitrary&hellip; operations. I imagine a mathematician and a type system research would beg to differ given the monad laws, but it&rsquo;s effectively arbitrary for IO monad operations. Return obviously just provides the wrapped function &mdash;  the definition of Maybe (in Haskell) or Option (in SML, though it isn&rsquo;t formally a monad there) is a good example.</li>
<li>At home now and I read slight more of TAPL (Types and Programming Languages, Benjamin Pierce), trying to cover the chapters leading up to 5 and 6 (untyped lambda calculus). I reviewed 5 and 6 already at Hacker School in order to participate in a study group session that talked about lambda calculus. Thinking about setting a goal around this (getting to know lambda calculus better) to implement some suggestions about concrete goals from Mel Chua during her residency at Hacker School</li>
<li>Also continued to try to get better grasp of <a href="http://www.haskell.org/haskellwiki/IO_inside">IO as part of Haskell</a> &mdash; I definitely still need to continue studying this concept.</li>
</ul>


<h2>22 Jun 2013</h2>

<ul>
<li>This morning, I dug a bit into concurrency, started reading about the differences between threads and processes (need to dig into this more) and how to do <a href="http://docs.python.org/2/library/multiprocessing.html">multiprocessing in Python</a>, at least to some extent. I&rsquo;m probably going to make some project out of this.</li>
<li>Read about the Python GIL and some of the <a href="http://ncoghlan_devs-python-notes.readthedocs.org/en/latest/python3/questions_and_answers.html">reasoning behind it</a>. Though the post didn&rsquo;t really cover the point, it definitely makes sense that allowing shared mutable state in multiple threads would cause nightmarishly unpredictable results given the language semantics (dynamic, allowing functions/classes, as giant bags of properties/functions, to be modified at any time). At some point, Python is going to have to deal with this though. Even if sequential operation with a GIL is faster now than an implementation that has to juggle locks, eventually computers will have enough cores that sequential speed won&rsquo;t make up for lack of parallelism.</li>
<li>Read a bit about <a href="http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html">STM for PyPy</a>. I&rsquo;m starting to get a better grasp of the concept after multiple exposures in different languages. It doesn&rsquo;t seem too much deeper than atomic, logged (and thus retry-able) transactions, but that simplicity in this realm seems to be a good thing.</li>
<li>Read about stackless Python, pypy, and <a href="http://greenlet.readthedocs.org/en/latest/">greenlets</a>. I never realized that these were all related projects. They embody an interesting approach to concurrency, though like threads it seems cumbersome/very low level and error-prone. Worth trying for myself and validating that though.</li>
<li>Digressed into <a href="http://pypy.org/performance.html">Python performance factors</a>, which is interesting to think about, especially how local copies of &ldquo;global&rdquo; methods/variables speed up execution. I saw the concept appear in Python Cookbook but never really understood how it worked (e.g. why would calling a function twice in a loop vs. assigning a local variable to the <em>exact same function</em> make any difference?). At least to some degree, I imagine this connects to the factors I mentioned about (objects as giant, dynamically modifiable bags), though I never connected the two in my mind before this.</li>
<li>Read about the theory behind <a href="http://en.wikipedia.org/wiki/Just-in-time_compilation">JIT compilers</a>. It&rsquo;s fascinating stuff. I&rsquo;m interested in potentially making one to more deeply understand the concept. Alas, I think this is a the general theme of the topics I&rsquo;m exploring, which creates a bit of an issue with the reality of how much time I have in a day&hellip;</li>
<li>Read about various <a href="http://www.codinghorror.com/blog/2007/04/pick-a-license-any-license.html">open source licenses and why I should include one</a>. I like the MIT license, personally. Short, sweet, gives credit and doesn&rsquo;t inhibit for-profit use (probably relates to my own business-friendly bias and what i like to personally see).</li>
<li>Read random posts on <a href="http://www.boredomandlaziness.org/">Nick Coghlan&rsquo;s blog</a>; interesting to get a better sense of the Python community</li>
<li>Hacker School rooftop party &mdash; it was basically all of the coordinators' birthdays at once. Fun times, fun conversations, and I got a lot of charcoal on myself dealing with the &ldquo;grill&rdquo; (it was basically a fire-pit). Met a lot of great people who are doing some pretty impressive things (&hellip; though we regularly have various software world luminaries come into Hacker School or show up in our internal communications/Humbug anyhow &mdash; fascinating how small the world is and tight knit it is).</li>
</ul>


<h2>23 Jun 2013</h2>

<ul>
<li>Read about Python 3 development and <a href="http://docs.python.org/devguide/coredev.html">how to be a core developer</a>&hellip; not sure about core developer-ship &mdash; I&rsquo;m definitely not there right now &mdash; but I would like to contribute to the Python language in some way. It&rsquo;ll be interesting to keep track and see if I get to a place where I can help out on any of the <a href="http://ncoghlan_devs-python-notes.readthedocs.org/en/latest/index.html">major places where the community needs help</a></li>
<li>Set up julia-mode for emacs,</li>
<li>Read about <a href="http://net.tutsplus.com/articles/interviews/should-you-learn-coffeescript/">CoffeeScript</a>. It&rsquo;s an interesting idea, though I certainly need more practice with base javascript first.</li>
<li>Diverted to CSS preprocessors (SASS and LESS) at least temporarily. Compass seems to give the advantage (somewhat) to SASS, but it seems unlikely that LESS wouldn&rsquo;t include something like it eventually. Given my dislike of working with CSS&rsquo;s syntax/concept in general though, I might try to stay with Bootstrap and AngularJS &mdash; I don&rsquo;t mind someone else figuring out what the right kerning/sizing/font for various headers are and adjusting from there.</li>
<li>Julia workshop with Leah! Intro to the Julia programming language.</li>
</ul>


<h2>24 Jun 2013</h2>

<ul>
<li><a href="http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems">Ninety-Nine Haskell Problems</a>, did some of these for <a href="https://github.com/j-wang/99-Haskell-Problems">Haskell practice</a></li>
<li>Wrote a hook to allow my tictactoe AI to play online against other tictactoe AIs. In the process, I got to know Python&rsquo;s urllib a lot better. Unfortunately, I still can&rsquo;t figure out the server&rsquo;s exact API &mdash; and I figure it isn&rsquo;t worth any more effort to fine-tune it, since I won&rsquo;t be getting much learning out of the exercise at this point other than what I need to connect to this specific server.</li>
<li>Code review with Laura on tictactoe &mdash; helpful to hear feedback on code that I did previously, and to see how much I&rsquo;ve improved/wouldn&rsquo;t write things the way I did just a few months ago. It&rsquo;ll be useful to go back and do some code revisions/refactoring myself to crystallize some of my improvement over time (which is hard to see otherwise).</li>
<li>Reviewing <a href="http://git-scm.com/book/en/">Git Pro</a> in preparation for GitHub training at Jane Street</li>
<li>Listened to a talk by Carin Meier on controlling robots and drones using Clojure! It was hosted by Etsy, which definitely was an interesting location (with a very quirky office).</li>
</ul>


<h2>25 Jun 2013</h2>

<ul>
<li>Went to Intermediate/Advanced Git tutorial hosted at Jane Street Capital this morning. It started a bit slow, but was really useful in bolstering my understanding of the tool, especially coming from a non-professional (programming) background and never having used a lot of the collaboration or branching functionality in a serious way.</li>
<li>Reading <a href="http://db.cs.berkeley.edu/papers/cidr11-bloom.pdf">Berkeley Bloom paper</a> in preparation for Systems discussion group.</li>
<li>Did a code reading for one of the earliest commits for bottle (commit HEAD~820 / SHA hash: 4f50cece28b8ee3ff1c5bcf3f8a7bd1d3bbf6128). It&rsquo;s really interesting to see how the author put together the pieces of it and the design decisions that went into it. My group also discovered a bad bug in the regex/special URL handling that I imagine got fixed in the later revisions (bottle sequentially loops through a list of regexes to match against a URL &mdash; however, this means a more general regex will always match first; compounding on this, there&rsquo;s a semi-random optimizing process that brings more frequently matched regexes forward in the list&hellip; which in the case of a very general match, would ultimately and self-reinforcingly end up in front and block any other matches from ever being reached).</li>
<li>Coming out of the bottle code reading session, I worked with my group in wrangling with the Python <code>@property</code> decorator (and decorator syntax more generally) and <code>@x.setter</code> syntax</li>
<li>Talked with Tom and learned about &ldquo;magic methods&rdquo; and how they work (<code>__get__</code>, <code>__set__</code>, <code>__setattr__</code>, <code>__getattr__</code>, <code>__setattribute__</code>, <code>__getattribute__</code>) &mdash; really interesting, and much more magic than I expect most users would need/understand&hellip; That being said, to really get to understand/know Python, I&rsquo;ll definitely need to understand how those work and how they fit into its evaluation model.</li>
<li>More learning about monads in Haskell from <a href="http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html">yet another blog post</a>. I did a fair number of the exercises, which was useful. I haven&rsquo;t uploaded them to github, but maybe I will later (if I finish them).</li>
<li>For the heck of it, I did learn how <a href="http://lambda.jstolarek.com/2012/10/code-testing-in-haskell/">Haskell testing frameworks work</a> (test-framework, HUnit, QuickCheck2), through testing my Monads tutorial exercises. This definitely was not the cost-effective project to learn this from (given that I probably didn&rsquo;t need tests at all), but I did need to learn sometime. In general, I should tighten up my testing discipline &mdash; out of the major &ldquo;best practices&rdquo; (clean, readable code, clear documentation, etc.), I am currently the most lax/entirely negligent on rigorous and systematic testing. I rely on my &ldquo;mental interpreter&rdquo; too much, which while important, shouldn&rsquo;t substitute for good tests. Not being a professional programmer, I just have never needed the discipline.</li>
<li>In the same vein (best practices and getting to know the Haskell ecosystem at least), I&rsquo;ve been learning about how Haskell modules work.</li>
<li>Reading from Computer Systems: A Programmer&rsquo;s Perspective (Bryant, O'Hallaron); probably going to continue reading this book and try to do questions from it</li>
</ul>


<h2>26 Jun 2013</h2>

<ul>
<li>Finished reading <a href="http://www.bloom-lang.net/calm/">Bloom paper</a> and researching <a href="http://databeta.wordpress.com/2010/10/28/the-calm-conjecture-reasoning-about-consistency/">CALM</a> principles. These weren&rsquo;t actually the papers I was supposed to read though&hellip; I&rsquo;m hoping they give me a better foundational understanding for Dedalus paper, which we are actually discussing.</li>
<li>Briefly went through <a href="https://en.wikipedia.org/wiki/Logic_programming">logic programming</a>, in order to better understand the Dedalus paper; I certainly barely scratched the surface, but I understand the basics of it now &mdash; hopefully enough for the paper &mdash; after seeing examples like the <a href="https://en.wikipedia.org/wiki/Horn_clause">Horn clause</a>. Formal logic from philosophy in college is starting to come back to me&hellip;</li>
<li>Discussed <a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2009/EECS-2009-173.pdf">Dedalus</a> with Systems reading paper group &mdash; I have a better sense of it now after working through it with the group, though I still don&rsquo;t entirely understand how Dedalus gracefully handles asynchronous data/information &mdash; at least not explicitly. I do understand the idea of how the time stamps would work with eventual consistency (rules come in later that help lead to consistency), but not how they literally make this happen. I&rsquo;ll reread the paper later, but that part seemed a bit fuzzy (though there were certainly enough dense sections that I could have missed it).</li>
<li>More discussion on monads, functors, and their mathematical properties with Nabil, Alex, and Alice</li>
<li>Listened to a talk about <a href="http://www.youtube.com/watch?v=fHK-uS-Iedc">miniKanren</a></li>
<li>Set up <a href="http://j-wang.net">octopress blog</a> on github pages with custom domain</li>
<li>Migrated posts (or at least downloaded them) from my Blogger blog</li>
<li>Updated blog colors, poked around how octopress/jekyll liquid templates work</li>
<li>Haskell meetup: I Accidentally the Entire Heap: How I Learned to Love the Profiler. Listened to <a href="https://www.bitba.se/i-accidentally-the-entire-heap/">this presentation</a>. If nothing else, this definitely served as a wake-up call for me to pay a <em>lot</em> more attention to how laziness affects the evaluation of Haskell programs. I imagine my lack of mental model familiarity with it is going to bite me at some point (probably sooner rather than later). Aside from the content of the meetup, I also thought that it was really interesting to see the strong (and seemingly consistent, based on peoples' familiarity with each other) community around the language. I&rsquo;m going to look forward to seeing what sort of communities there are in the Bay Area.</li>
</ul>


<h2>27 Jun 2013</h2>

<ul>
<li>Came in early this morning to participate in a Javascript seminar led by Mary on javascript (of course) and higher order functions</li>
<li>Discussed characteristics of <code>this</code> in javascript along with how closures work in javascript with Mary</li>
<li>Finished pretty basic implementation (after discussing with Mary) for <a href="https://github.com/j-wang/javascript-exercises">map and reduce</a>. My misunderstanding of <code>this</code> was definitely holding me back from writing better patterns. However, I don&rsquo;t think I love the particular quirks in javascript or its general evaluation/scoping model (yeah, I know, join the club, right?).</li>
<li>Worked a bit more on my <a href="http://j-wang.net">blog</a> (this post will actually be on my blog &mdash; very meta, huh?). Pushed/uploaded posts from my old blog (which is still linking to my blogger site for images&hellip; definitely need to fix that) and pushed updated color scheme. Nothing dramatic, but I do like the slight dash of subtle color, vs. the default octopress black on gray, on white.</li>
<li>It seems I have ended up working a bit longer on my site than I expected. I messed up and did <code>git checkout source</code> (which was behind my detached HEAD in git) &mdash; needed to do a bit of recovery with <code>git reflog</code> and moving everything up to the most-updated blog state. It seems the git tutorial came in handy very quickly after all.</li>
<li>While working on my site anyway, I debugged Disqus comments not working on my site&hellip; after digging into the liquid template, it looked like I needed to specify the comments = true in the front-matter for each page.</li>
<li>I started writing my untyped lambda calculus interpreter in Python (which I probably should have started a few days ago). <a href="https://github.com/j-wang/untyped-lambda-calculus-interpreter">Here&rsquo;s the link to it</a>, though it definitely isn&rsquo;t ready for prime time&hellip; or even to be run. I&rsquo;m currently only as far as the lexer.</li>
<li>I also started it in Haskell (actually flipping between the two for a while&hellip;), but I don&rsquo;t think I have enough experience in it yet to do so efficiently, even though it&rsquo;s likely the more natural fit for an interpreter.</li>
<li>While writing the lexer, I learned a lot about regular expressions (specifically for Python, but also more broadly applicable). Funny how these projects end up creating paths that help me learn things that I never thought I would when I began the project&hellip; (though I probably should have anticipated this for an <em>interpreter</em>).</li>
<li>Read some of &ldquo;The Mythical Man Month.&rdquo; It&rsquo;s a very interesting book. Many of the principles/challenges are similar to what I saw in the investment world (creative, technical field). Essentially, I take away that it&rsquo;s important (as I learned in that field) to manage so that you can accomplish what you need to do with a realistic amount of time and available resources &mdash; to crunch it is just to create a train wreck. You might get halfway to your goal, but you didn&rsquo;t get all the way and left a large mess that you&rsquo;ll need to clean up later. I&rsquo;m pretty happy that the field in general seems to care deeply about craftsmanship and code beauty though.</li>
</ul>


<h2>28 Jun 2013</h2>

<ul>
<li>Played D&amp;D with other batch members &mdash; never played before, so it was interesting and fun. I definitely can imagine that one&rsquo;s experience will depend greatly on the group you gather though. Fortunately, we have a good one among Hacker Schoolers!</li>
<li>Read more of &ldquo;The Mythical Man Month&rdquo;</li>
<li>Slowest coding day since I started Hacker School, but at least there was great bonding time!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AI for Tic-Tac-Toe]]></title>
    <link href="http://j-wang.net/blog/2013/06/21/ai-for-tic-tac-toe/"/>
    <updated>2013-06-21T20:28:00-04:00</updated>
    <id>http://j-wang.net/blog/2013/06/21/ai-for-tic-tac-toe</id>
    <content type="html"><![CDATA[<p>As part of my Hacker School application, I wrote a simple <a href="https://github.com/j-wang/hacker-school/blob/master/tictactoe.py">Tic-Tac-Toe application</a> for my &ldquo;program written from scratch.&rdquo; My choice was driven primarily by the fact that the application itself suggested a Tic-Tac-Toe application. As such, I expected many other people would write Tic-Tac-Toe (I was very right in this regard) and wanted to do something unique. My original ambitious plan was to write an AI for it. Unfortunately, I had to quickly abandon this plan, since I realized 1) I had no idea how I would go about creating one, and 2) I didn&rsquo;t have enough time to figure it out before the application was due. As such, I had to settle for infinitely expandable Tic-Tac-Toe (theoretically anyway &mdash; at greater than 15 x 15, it becomes quite visually ugly).</p>

<p>Now that I do have the time, I definitely wanted to tackle writing an AI for Tic-Tac-Toe. However, I didn&rsquo;t want to just find and apply an algorithm. I wanted to have the full challenge and experience of working through how one would create an AI.<!-- more --></p>

<p>My basic idea for an AI was that it would play out possible future moves and pick the one that resulted in the best outcome for itself. Of course, the trick is how one calculates &ldquo;best outcome.&rdquo;</p>

<p>My first attempt involved counting the number of ways that a player could win vs. the number of ways an opponent could win and using this as the critera for determining the best next move. The main reason I decided to go this direction was simplicity of implementation: I had already implemented a complicated tallying/coordinate system in my Tic-Tac-Toe game&rsquo;s <code>Grid</code> class that I thought I could commandeer for this purposes. It also let me calculate best next moves for intermediate game-states, which appealed to me for implementing difficulty levels. The naive version of this method didn&rsquo;t work (the algorithm ignored one-move wins, preferring many ways to win over just winning), so I tried ramping up the value of a win to sys.maxint and penalizing longer chains to victory. Below, I show the primary logic behind the AI (full code is on <a href="https://github.com/j-wang/tictactoe_ai">Github</a>).</p>

<p>The basic algorithm involved is iterative recursive, which is a pattern that I&rsquo;m finding I like a lot in Python. Iteratively traverse all cells of the grid (breadth):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">traverse</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">XO</span><span class="p">,</span> <span class="n">move_acc</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">open_cells</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_open_cells</span><span class="p">(</span><span class="n">grid</span><span class="o">.</span><span class="n">cells</span><span class="p">)</span>
</span><span class='line'><span class="n">dig_outcomes</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">cell</span> <span class="ow">in</span> <span class="n">open_cells</span><span class="p">:</span>
</span><span class='line'>    <span class="n">dig_outcomes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dig</span><span class="p">(</span><span class="n">cell</span><span class="p">,</span> <span class="n">grid</span><span class="p">,</span> <span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">XO</span><span class="p">,</span> <span class="n">move_acc</span><span class="p">))</span>
</span><span class='line'><span class="n">solution</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dig_outcomes</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="k">return</span> <span class="n">solution</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And then recursively &ldquo;dig&rdquo; into each of these cells by simulating the player whose simulated turn it was moving there on a deepcopied <code>Grid</code> (depth).</p>

<p>The complicated code below (difficult to read mainly because it builds off of elements of the <code>Grid</code> class that I never exposed or expected to expose) shows the digging. It returns a tuple with win-loss &ldquo;scores&rdquo;, and the moves it took to reach that outcome. The &ldquo;scores&rdquo; are actually a pair of scores: the first is based on the outcome (win/loss/tie &mdash; though wins with fewer moves are given higher scores) and the second is based on how many more ways the AI could have won (and how close it was) vs. the player. Since many outcomes can be the same (win in same number of moves), I use the relative number of paths and closeness to victory as a tiebreaker.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">dig</span><span class="p">(</span><span class="n">move</span><span class="p">,</span> <span class="n">grid</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">XO</span><span class="p">,</span> <span class="n">move_acc</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">depth</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">grid</span><span class="o">.</span><span class="n">winner</span><span class="p">():</span>
</span><span class='line'>    <span class="n">win_flag</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">grid</span><span class="o">.</span><span class="n">winner</span><span class="p">()</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">_XO</span><span class="p">:</span>
</span><span class='line'>        <span class="n">win_flag</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">maxint</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">move_acc</span><span class="p">)</span>  <span class="c"># short wins best</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">grid</span><span class="o">.</span><span class="n">winner</span><span class="p">()</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">_flip_player</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_XO</span><span class="p">):</span>
</span><span class='line'>        <span class="n">win_flag</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>  <span class="c"># losses are worst</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># remember that victory_routes are centered around 0</span>
</span><span class='line'>    <span class="n">adj_victory_route</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">_multiplier</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">grid</span><span class="o">.</span><span class="n">_victory_routes</span><span class="p">)</span>
</span><span class='line'>    <span class="n">opponent_closeness</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">adj_victory_route</span><span class="p">)</span>
</span><span class='line'>    <span class="n">opponent_ways</span> <span class="o">=</span> <span class="n">adj_victory_route</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">opponent_closeness</span><span class="p">)</span>
</span><span class='line'>    <span class="n">player_closeness</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">adj_victory_route</span><span class="p">)</span>
</span><span class='line'>    <span class="n">player_ways</span> <span class="o">=</span> <span class="n">adj_victory_route</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">player_closeness</span><span class="p">)</span>
</span><span class='line'>    <span class="n">diff</span> <span class="o">=</span> <span class="p">(</span><span class="n">player_closeness</span> <span class="o">*</span> <span class="n">player_ways</span> <span class="o">+</span>
</span><span class='line'>            <span class="n">opponent_closeness</span> <span class="o">*</span> <span class="n">opponent_ways</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">((</span><span class="n">win_flag</span><span class="p">,</span> <span class="n">diff</span><span class="p">),</span> <span class="n">move_acc</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">new_grid</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_moves</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">move_acc</span><span class="p">)</span>
</span><span class='line'>    <span class="n">r</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">move</span>
</span><span class='line'>    <span class="n">new_grid</span><span class="o">.</span><span class="n">fill_cell</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">XO</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_moves</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">move</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">traverse</span><span class="p">(</span><span class="n">new_grid</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_flip_player</span><span class="p">(</span><span class="n">XO</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">new_moves</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This kind of worked. The AI very often made the &ldquo;right&rdquo; move, but sometimes did stupid things. I&rsquo;m pretty sure it was because I just multiplied together closeness to victory and ways to victory naively (implicitly weighting sure victories the same as many possible, but unlikely victories). I could have refined this further, and I still think there is some value to a path like this, since I can actually create more or less smart AIs by this method, but it would have taken much more trial-and-error tweaking of how I weighted various factors. The bigger problem was acutally that it was too slow &mdash; turns out copying huge <code>Grid</code> objects over and over again down an entire tree of possible outcomes is really slow. Who would have thunk it? I didn&rsquo;t want to reimplement all of the logic I created to track number of ways to win, so I decided to go down a different route.</p>

<p>One thing I realized was that I didn&rsquo;t have to track <em>every</em> move. I just needed to track the opponent&rsquo;s <em>best</em> moves and my AI&rsquo;s responses to those moves. Now, what about best? As said, I didn&rsquo;t want to reimplement a bunch of <code>Grid</code>&rsquo;s logic. If I gave up the idea of intermediate scoring, I could just determine the best move (for either player) by the one that ultimately resulted in victory at the last move&hellip; and then recursively choose the moves that give each player a better chance of victory all the way up the chain. I didn&rsquo;t quite realize it until I talked to other fellow Hacker Schoolers, but in trying to not reimplement a bunch of victory logic, I appeared to have reinvented a form of the mini-max algorithm. It&rsquo;s also much shorter and cleaner (called <code>LeanComputerPlayer</code> in the Github code).</p>

<p>The new iterative breadth traversal (the board is now just a flattened list representation of the board, e.g. 0th element is the top left cell, 4th element is the center cell) using a list comprehension:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">descendants</span><span class="p">(</span><span class="n">moves</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">player</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">copy_ret</span><span class="p">(</span><span class="n">brd</span><span class="p">,</span> <span class="n">mv</span><span class="p">,</span> <span class="n">plyr</span><span class="p">):</span>
</span><span class='line'>    <span class="n">new_board</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_board</span><span class="p">[</span><span class="n">mv</span><span class="p">]</span> <span class="o">=</span> <span class="n">plyr</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new_board</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="p">[</span><span class="n">solve_tree</span><span class="p">(</span><span class="n">copy_ret</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">mv</span><span class="p">,</span> <span class="n">player</span><span class="p">),</span> <span class="n">flip</span><span class="p">(</span><span class="n">player</span><span class="p">),</span> <span class="n">mv</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">mv</span> <span class="ow">in</span> <span class="n">moves</span><span class="p">]</span>  <span class="c"># flip just switches players</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And the new recursive depth/comparison function, which sums up 1s for AI wins and -1s for human wins. It chooses max ultimate win outcomes if player is AI, choose min if player is human &mdash; since the game is played to its end conditions, these are perfect inverses of one another:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">solve_tree</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">player</span><span class="p">,</span> <span class="n">move</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">moves</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_pos_moves</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'><span class="n">winner</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_winner</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">moves</span> <span class="o">==</span> <span class="p">[]</span> <span class="ow">or</span> <span class="n">winner</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">winner</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">outcome_val</span><span class="p">[</span><span class="n">winner</span><span class="p">],</span> <span class="n">move</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_draw_value</span><span class="p">,</span> <span class="n">move</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">results</span> <span class="o">=</span> <span class="n">descendants</span><span class="p">(</span><span class="n">moves</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">player</span><span class="p">)</span>
</span><span class='line'>    <span class="n">min_or_max</span> <span class="o">=</span> <span class="nb">max</span> <span class="k">if</span> <span class="n">player</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">XO</span> <span class="k">else</span> <span class="nb">min</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">min_or_max</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">move</span> <span class="k">if</span> <span class="n">move</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These two are helper functions within the <code>next_move</code> method in <code>LeanComputerPlayer</code>. They are kicked off by the last line in the method:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">return</span> <span class="n">solve_tree</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_board</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">XO</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And it works (AI always wins or ties) and it&rsquo;s fast! The one optimization I made after this was to have the AI automatically pick the middle cell at the beginning of the game. Since traversing down the entire tree is an operation that takes n! steps where n is the number of starting cells (9 possible moves, with 8 possible next moves for each of the 9 starting moves, and then 7 moves for each of the 8 moves&hellip; and so on), calculating the first move is much slower than subsequent moves (9! moves to check vs. 8! which is 362,880 moves vs. 40,320) and also pointless since if the AI has the first move, we know the center cell is always the optimal solution. Again, this code is on <a href="https://github.com/j-wang/tictactoe_ai">Github</a>.</p>

<p>And thus, week three ends! I&rsquo;m looking forward to week four though at the moment, I don&rsquo;t quite know what I&rsquo;ll turn to next.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faces Game Web App]]></title>
    <link href="http://j-wang.net/blog/2013/06/14/faces-game-web-app/"/>
    <updated>2013-06-14T19:09:00-04:00</updated>
    <id>http://j-wang.net/blog/2013/06/14/faces-game-web-app</id>
    <content type="html"><![CDATA[<p>Last week, while working on my <a href="/blog/2013/06/07/first-project-simple-text-editor/">simple text editor</a>, I chatted with fellow Hacker Schoolers about what was actually being used in the industry nowadays for GUIs. The answer I most commonly heard was that the tech world had largely moved on to web (and mobile) apps. No one who I spoke to actually worked on desktop applications. The insight here is quite fascinating to me.</p>

<p>Developers and users are a chicken-and-egg problem. To get developers to work on a platform, you need users. To have users, you need a strong developer base that creates appealing and useful apps. It&rsquo;s a small sample set, but the lopsided nature of the sentiments suggest to me that either developers have a stronger lean towards web than users or the companies that work in web are much more interesting/appealing to the strong programmers that Hacker School selects for and attracts. Again, it&rsquo;s too small a sample set to draw sweeping conclusions, but it is an interesting data point. Nevertheless, these conversations helped point me to my next project: a web app.<!-- more --></p>

<p>I&rsquo;ve built static websites and played around with content management systems (CMS) like Wordpress in the past. In doing so, I&rsquo;ve played around with HTML and CSS. However, those have mainly been exercises of graphical tweaking. I&rsquo;ve never built a web app (dynamic content) before, which requires more understanding of how web sites serve content (requests and responses), knowledge of server/user data management (persistent storage and sessions/cookies), and at least a basic understanding of concurrency &mdash; though web frameworks largely abstract away the latter.</p>

<p>At the beginning of the week, I spent many productive hours working through tutorials and many less productive hours thinking about what web app to create and what language to write it in. I ended up defaulting to Python, since like last time my current goal is to focus on this area topic and not languages. In terms of web frameworks, a fellow batch-mate, <a href="http://skien.cc/">Erik</a>, suggested that I look at <a href="http://flask.pocoo.org/">Flask</a>, whose lightweight nature immediately appealed to me. For what I needed it for, it has easy-to-understand and extremely simple routing and templating functionality. There&rsquo;s still some magic in routing, but I&rsquo;m not quite prepared to write my own web framework and create HTML request-handling/responses myself quite yet.</p>

<p>Finally, I decided to create a &ldquo;Faces Game,&rdquo; based on a project from a prior batch. There was some demand for an updated version including our batch, and it had all of the elements I wanted: dynamic content, (minor) data management, login handling (since I wanted to restrict it to Hacker Schoolers), scraping (I wanted to dynamically retrieve information from the Hacker School website for posterity), and processing/handling scraped data. The code is on <a href="https://github.com/j-wang/faces-game">Github</a> and the app is live on <a href="https://enigmatic-hollows-9840.herokuapp.com/">Heroku</a>. There are definitely many improvements I can make to it: multiple difficulty levels, free-form responses, caching, OAuth vs. mechanize login, etc. but it served its learning purpose. I learned a lot about what HTML requests/responses contain, HTML GET and POST methods, how form data works, how HTML templates work, and how web servers work (along with, of course, a refresher on writing HTML/CSS). Given that these topics are non-specific to Python and Flask, post-project I found that I could helpfully pair with several other Hacker Schoolers on their web apps (whether they were Python/Flask or not). Although I&rsquo;m probably done with this web app, given their importance/prevalence I&rsquo;ll probably be revisiting web apps again in the future.</p>

<p>Only Hacker Schoolers can play the game, but screenshots from it are below.</p>

<h2>Login Screen</h2>

<p>Takes a username and password, which my scraper (built without preexisting scraper/spider libraries) uses to login into the Hacker School website for the user session.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/posts/faces_game_login.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>

<h2>Batch Selection</h2>

<p>These batches are dynamically scraped from the Hacker School website, which means that this will automatically handle future batches.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/posts/faces_game_select_batch.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>

<h2>Guessing Screen</h2>

<p>This screen shows random Hacker Schooler, with the correct name somewhere in the list of five other names (drawn randomly from the same batch) below.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/posts/faces_game_guess.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>

<h2>Result Screen</h2>

<p>Shows whether or not the user correctly answered, the name of the Hacker Schooler, and his or her listed skills on the Hacker School website.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/posts/faces_game_after_guess.png' width='' height='' alt='' title=''><span class='caption-text'></span></span></p>
]]></content>
  </entry>
  
</feed>
