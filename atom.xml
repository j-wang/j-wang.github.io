<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[James's Blog]]></title>
  <link href="http://j-wang.net/atom.xml" rel="self"/>
  <link href="http://j-wang.net/"/>
  <updated>2013-08-05T02:35:09-04:00</updated>
  <id>http://j-wang.net/</id>
  <author>
    <name><![CDATA[James Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fun with Python For Loops]]></title>
    <link href="http://j-wang.net/blog/2013/07/12/fun-with-python-for-loops/"/>
    <updated>2013-07-12T13:07:00-04:00</updated>
    <id>http://j-wang.net/blog/2013/07/12/fun-with-python-for-loops</id>
    <content type="html"><![CDATA[<p>As mentioned in my <a href="http://j-wang.net/blog/2013/07/10/lambda-calculus-interpreter-and-benefits-of-ugliness/">last post</a>, while working on a lambda calculus interpreter, I encountered an issue where I wanted to skip ahead in a <em>for</em> loop, but found that I couldn&rsquo;t. Although I initially put it aside, when I was getting a code review on the interpreter from Tom, I remembered the issue again and did some further investigation on the topic.<!-- more --></p>

<h2>Reassigning the Index Variable</h2>

<p>It turns out that unlike <em>for</em> loops in Java or C++, the index variable (e.g. <code>i</code> in <code>for (int i = 0; i &lt; 10; i++)</code> is drawn directly from the object following the <code>in</code> keyword each time the <em>for</em> loop goes around. As such, changing what the index <code>i</code> references in the equivalent Python loop <code>for i in range(10)</code> won&rsquo;t affect the next round of the <em>for</em> loop (though it will affect anything following the reassignment in the block).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">20</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code results in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4</span></code></pre></td></tr></table></div></figure>


<h2>Reassigning the Iterable Variable</h2>

<p>Additionally, after you provide Python with an initial reference to an object with an iterable method in a <em>for</em> loop, Python accesses the object directly without referring back to the reference variable passed into the <em>for</em> loop. So, what does this mean? Well, it means that you can&rsquo;t reassign the <em>for</em> loop&rsquo;s iterable object in the middle of a <em>for</em> loop.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span>
</span><span class='line'>    <span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code, despite reassignment of <code>iter_this</code> results in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4</span></code></pre></td></tr></table></div></figure>


<p>So, does this mean that you can&rsquo;t do anything to modify what a <em>for</em> loop ranges over once you&rsquo;ve started it? Nope. Although Python accesses the iterable object directly without regards to what your reference subsequently points to, something else can also access that iterable object &mdash; specifically, the reference that you originally used to direct Python to that object.</p>

<h2>Mutating the Iterable Object</h2>

<p>Since you have a reference to the Python object itself, you can actually change the object that is being iterated over by the <em>for</em> loop from right under it. Essentially instead of reassigning the object&rsquo;s reference, you can change the object itself, i.e. mutate it.</p>

<p>We know what the below code does:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4</span></code></pre></td></tr></table></div></figure>


<p>However, this does something different:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span>
</span><span class='line'>    <span class="n">iter_this</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2</span></code></pre></td></tr></table></div></figure>


<p>So what happened? Well, let&rsquo;s take a closer look:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;iter: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;pop!: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">iter_this</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;iter_this: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">iter_this</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iter: 0
</span><span class='line'>pop!: 4
</span><span class='line'>iter: 1
</span><span class='line'>pop!: 3
</span><span class='line'>iter: 2
</span><span class='line'>pop!: 2
</span><span class='line'>iter_this: [0, 1]</span></code></pre></td></tr></table></div></figure>


<p>As the <em>for</em> loop iterates through the list created by the <code>range</code> function, we mutate the list by popping off its last element at the end of each <em>for</em> loop round. Hence, the list that the <em>for</em> loop is drawing from is getting shorter as the <em>for</em> loop lists, resulting in the <em>for</em> loop ending early.</p>

<p>This means that if you need to skip elements in a <em>for</em> loop, you can certainly mutate the iterable object. However, just because you can doesn&rsquo;t mean you necessarily should. Mutation will often cause the <em>for</em> loop to become a lot less straightforward to reason about and may end up creating strange and confusing bugs.</p>

<h2>Other Ways to Skip Around a Loop</h2>

<p>One way of skipping elements in a loop that isn&rsquo;t quite as opaque is by explicitly creating another variable that can be modified and <code>continue</code>ing when the elements in the iterable are less than (or greater than, or whatever) than the modifiable variable.</p>

<p>This method is what I ultimately settled on for parts of my lambda calculus interpreter that needed to skip elements. It made sense since my <em>for</em> loop skipping would always be in the forward direction (I would never need to backtrack in my <em>for</em> loop) and this makes it crystal clear what I&rsquo;m doing.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iter_this</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">skip_while_less</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iter_this</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">skip_while_less</span><span class="p">:</span>
</span><span class='line'>        <span class="k">continue</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">i</span>
</span><span class='line'>        <span class="n">skip_while_less</span> <span class="o">+=</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>3
</span><span class='line'>6
</span><span class='line'>9</span></code></pre></td></tr></table></div></figure>


<p>On the other hand, if you need to skip around a loop (backwards as well as forwards), it is probably better (and clearer) to just use a while loop.</p>

<p>while:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">end</span> <span class="o">=</span> <span class="mi">12</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">*=</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2
</span><span class='line'>1
</span><span class='line'>4
</span><span class='line'>3
</span><span class='line'>12
</span><span class='line'>11</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lambda Calculus Interpreter and Benefits of Ugliness]]></title>
    <link href="http://j-wang.net/blog/2013/07/10/lambda-calculus-interpreter-and-benefits-of-ugliness/"/>
    <updated>2013-07-10T23:19:00-04:00</updated>
    <id>http://j-wang.net/blog/2013/07/10/lambda-calculus-interpreter-and-benefits-of-ugliness</id>
    <content type="html"><![CDATA[<p>For the past week, I&rsquo;ve been working on a lambda calculus interpreter (<a href="https://github.com/j-wang/untyped-lambda-calculus-interpreter">Github</a>) in order to try to better understand the concepts in lambda calculus. It&rsquo;s been a great experience, especially since I&rsquo;ve been coding it in Python. Normally, if I were writing the interpreter in a language like SML or Haskell, I would rely heavily on pattern-matching.</p>

<p>Using pattern-matching is a pretty natural fit for creating an interpreter, given the operations involved in lexing, parsing, and reduction/evaluation &mdash; specifically, handling a particular encountered block depending on the token or keyword/structure encountered.<!-- more --> An example of this idea implemented in a Haskell lexer is below:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">lexer</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
</span><span class='line'><span class="nf">lexer</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">lexer</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span>
</span><span class='line'>    <span class="kr">case</span> <span class="n">x</span> <span class="kr">of</span>
</span><span class='line'>      <span class="sc">&#39;(&#39;</span> <span class="ow">-&gt;</span> <span class="s">&quot;(&quot;</span> <span class="kt">:</span> <span class="n">lexer</span> <span class="n">xs</span>
</span><span class='line'>      <span class="sc">&#39;)&#39;</span> <span class="ow">-&gt;</span> <span class="s">&quot;)&quot;</span> <span class="kt">:</span> <span class="n">lexer</span> <span class="n">xs</span>
</span><span class='line'>      <span class="sc">&#39;.&#39;</span> <span class="ow">-&gt;</span> <span class="s">&quot;.&quot;</span> <span class="kt">:</span> <span class="n">lexer</span> <span class="n">xs</span>
</span><span class='line'>      <span class="sc">&#39; &#39;</span> <span class="ow">-&gt;</span> <span class="n">lexer</span> <span class="n">xs</span>
</span><span class='line'>      <span class="kr">_</span>   <span class="ow">-&gt;</span> <span class="kr">let</span> <span class="n">chunkWord</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'>                 <span class="n">chunkWord</span> <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span><span class="p">)</span> <span class="ow">=</span>
</span><span class='line'>                     <span class="kr">case</span> <span class="n">y</span> <span class="kr">of</span>
</span><span class='line'>                       <span class="sc">&#39; &#39;</span> <span class="ow">-&gt;</span> <span class="kt">[]</span>
</span><span class='line'>                       <span class="sc">&#39;)&#39;</span> <span class="ow">-&gt;</span> <span class="kt">[]</span>
</span><span class='line'>                       <span class="sc">&#39;.&#39;</span> <span class="ow">-&gt;</span> <span class="kt">[]</span>
</span><span class='line'>                       <span class="kr">_</span>   <span class="ow">-&gt;</span> <span class="n">y</span> <span class="kt">:</span> <span class="n">chunkWord</span> <span class="n">ys</span>
</span><span class='line'>                 <span class="n">word</span> <span class="ow">=</span> <span class="n">chunkWord</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span>
</span><span class='line'>             <span class="kr">in</span> <span class="n">word</span> <span class="kt">:</span> <span class="p">(</span><span class="n">lexer</span> <span class="o">$</span> <span class="n">drop</span> <span class="p">(</span><span class="n">length</span> <span class="n">word</span><span class="p">)</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The lexer takes a string and iterates through it character by character. Each character encountered has specified a certain action (even if the actions are simple in this case). A <code>'('</code> character produces the action of creating a cons list of the string <code>"("</code> and the result of lexer on the rest of the string. An analogous action happens for <code>')'</code>, <code>'.'</code>, and <code>' '</code>. For anything else (which has to then be a keyword or variable in lambda calculus), chunk it together as a string and cons it onto the rest of the the string (sans chunked string). It&rsquo;s not bad, though I imagine I&rsquo;d probably be able to write this in an even more concise way if I knew Haskell better.</p>

<p>If I were to translate this code literally to Python, I would enter <code>elif</code> hell, since Python has neither pattern matching or even case expressions. Although beauty is in the eye of the beholder, a massive block of <code>elif</code>s is not what I consider beautiful code. For such a small codeblock, it isn&rsquo;t too bad, but even so, it looks verbose when in Python.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Lexer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">tokenize</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">string</span><span class="p">):</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">first_letter</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">char</span> <span class="o">==</span> <span class="s">&#39;(&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>                <span class="n">first_letter</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">char</span> <span class="o">==</span> <span class="s">&#39;)&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>                <span class="n">first_letter</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">char</span> <span class="o">==</span> <span class="s">&#39;.&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">char</span> <span class="o">==</span> <span class="s">&#39; &#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">first_letter</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">first_letter</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">first_letter</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">result</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">char</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, it&rsquo;s not <em>that</em> bad, given how short the set of cases there are here (I&rsquo;ll have to actually find a longer interpreter to give a properly horrifying example). In fact, taking into account the <code>chunkWord</code> gymnastics I had to do in Haskell to satisfy the type checker (though that might just be my ignorance in Haskell), it might even look nicer to some (aside from the <code>first_letter</code> gymnastics required here because you can&rsquo;t easily skip ahead characters in a Python <code>for</code> loop&hellip; a topic for another post). However, even here the specific case pattern looks annoyingly verbose and repetitive, at least to my eyes (it takes up two lines at minimum and starts to blur together with many, many <code>elif</code>s or, alternatively, spaghetti code where the operations are separated from the call site if you opt for using a dictionary to handle each case&hellip; especially if you have to define the operations as functions separate from the dictionary).</p>

<p>However, this type of ugliness does comes with an advantage. The Haskell version actually has a lot of code repetition which is made tolerable and even pleasant through pattern-matching. Being forced to think more cleverly about how to express one&rsquo;s ideas in a succinct way to counter that ugliness can give one deeper insight into what&rsquo;s actually going on. For example, the below code more explicitly acknowledges the code repetition and handles the <code>for</code> skipping-ahead challenge in a cleaner way (to my eyes), by accumulating characters when the current character is not one of the special delimiters and clearing it when it reaches one of those delimiters.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Lexer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">tokenize</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">string</span><span class="p">):</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">temp</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">char</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&#39;(&#39;</span><span class="p">,</span> <span class="s">&#39;)&#39;</span><span class="p">,</span> <span class="s">&#39;.&#39;</span><span class="p">,</span> <span class="s">&#39; &#39;</span><span class="p">]:</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">temp</span> <span class="o">!=</span> <span class="s">&#39;&#39;</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">temp</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">char</span> <span class="o">!=</span> <span class="s">&#39; &#39;</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">+</span> <span class="n">char</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">temp</span> <span class="o">!=</span> <span class="s">&#39;&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even though this can probably also be improved upon, being forced to think harder and attack the problem with multiple paradigms was helpful. The fact that Python is not great at handling multiple cases in a neat, clean way was actually beneficial for my understanding in this case.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Activity Log: Jun 21st - 28th]]></title>
    <link href="http://j-wang.net/blog/2013/06/30/hacker-school-activity-log-jun-21st-28th/"/>
    <updated>2013-06-30T23:50:00-04:00</updated>
    <id>http://j-wang.net/blog/2013/06/30/hacker-school-activity-log-jun-21st-28th</id>
    <content type="html"><![CDATA[<p>I only started this log last week, but figured it would be helpful to start tracking more of what I do at Hacker School, apart from my bigger projects. As a side benefit, it might give some of the people who have asked me what I&rsquo;m doing at Hacker School some insight into what a typical day might be like &mdash; though do keep in mind I&rsquo;ve likely not captured literally every single thing and this particular week was more chaotic and scattered than average.</p>

<p>This is more of an experimental idea right now, but if it works out well, I&rsquo;ll try to post these at the end of each week.</p>

<!-- more -->


<h2>21 Jun 2013</h2>

<ul>
<li>Completed TicTacToe AI with real minimax in Python; always wins or ties. I previously created one that used a depth-based weighting system (the fewer moves it takes to reach a win/loss state and get close to a victory, the higher the &ldquo;score&rdquo;), but it sometimes did stupid things. To be fair, it didn&rsquo;t do stupid things that often, but considering the game is solvable, I figured I might as well solve it.  <a href="https://github.com/j-wang/tictactoe_ai">Link to github repo here.</a></li>
<li>Set up Haskell for emacs (haskell-mode and scion); installed cabal and hlint. Typical setup for a new language.</li>
<li>Reviewed Haskell <a href="http://www.haskell.org/haskellwiki/Programming_guidelines">style guide</a>. Style guides are one of the first things I look at in a new language &mdash; it helps me get a flavor of what good code looks like, often informs me about some of the language&rsquo;s quirks, and usually tells me something about what is efficient or not in the language.</li>
<li>Wrote first simple program in Haskell (along the lines of simple sum functions and &ldquo;hello world&rdquo; type of things &mdash; I didn&rsquo;t bother to push it to github).</li>
<li>I&rsquo;m trying to wrap head around monads, though am largely failing. Some of the links I perused. <a href="http://www.haskell.org/haskellwiki/Monad">Haskell wiki page on monads.</a> <a href="http://www.haskell.org/haskellwiki/Do_notation_considered_harmful">&ldquo;Do notation considered harmful.&rdquo;</a> <a href="http://www.haskell.org/haskellwiki/Monad_laws">Monad laws.</a></li>
<li>Talked with Martin. After our conversation and playing around with the concept in SML, I grasp it a lot better. <code>&gt;&gt;=</code> is essentially a pipeline of actions, allowing access to wrapped value to execute&hellip; largely arbitrary&hellip; operations. I imagine a mathematician and a type system research would beg to differ given the monad laws, but it&rsquo;s effectively arbitrary for IO monad operations. Return obviously just provides the wrapped function &mdash;  the definition of Maybe (in Haskell) or Option (in SML, though it isn&rsquo;t formally a monad there) is a good example.</li>
<li>At home now and I read slight more of TAPL (Types and Programming Languages, Benjamin Pierce), trying to cover the chapters leading up to 5 and 6 (untyped lambda calculus). I reviewed 5 and 6 already at Hacker School in order to participate in a study group session that talked about lambda calculus. Thinking about setting a goal around this (getting to know lambda calculus better) to implement some suggestions about concrete goals from Mel Chua during her residency at Hacker School</li>
<li>Also continued to try to get better grasp of <a href="http://www.haskell.org/haskellwiki/IO_inside">IO as part of Haskell</a> &mdash; I definitely still need to continue studying this concept.</li>
</ul>


<h2>22 Jun 2013</h2>

<ul>
<li>This morning, I dug a bit into concurrency, started reading about the differences between threads and processes (need to dig into this more) and how to do <a href="http://docs.python.org/2/library/multiprocessing.html">multiprocessing in Python</a>, at least to some extent. I&rsquo;m probably going to make some project out of this.</li>
<li>Read about the Python GIL and some of the <a href="http://ncoghlan_devs-python-notes.readthedocs.org/en/latest/python3/questions_and_answers.html">reasoning behind it</a>. Though the post didn&rsquo;t really cover the point, it definitely makes sense that allowing shared mutable state in multiple threads would cause nightmarishly unpredictable results given the language semantics (dynamic, allowing functions/classes, as giant bags of properties/functions, to be modified at any time). At some point, Python is going to have to deal with this though. Even if sequential operation with a GIL is faster now than an implementation that has to juggle locks, eventually computers will have enough cores that sequential speed won&rsquo;t make up for lack of parallelism.</li>
<li>Read a bit about <a href="http://morepypy.blogspot.com/2011/08/we-need-software-transactional-memory.html">STM for PyPy</a>. I&rsquo;m starting to get a better grasp of the concept after multiple exposures in different languages. It doesn&rsquo;t seem too much deeper than atomic, logged (and thus retry-able) transactions, but that simplicity in this realm seems to be a good thing.</li>
<li>Read about stackless Python, pypy, and <a href="http://greenlet.readthedocs.org/en/latest/">greenlets</a>. I never realized that these were all related projects. They embody an interesting approach to concurrency, though like threads it seems cumbersome/very low level and error-prone. Worth trying for myself and validating that though.</li>
<li>Digressed into <a href="http://pypy.org/performance.html">Python performance factors</a>, which is interesting to think about, especially how local copies of &ldquo;global&rdquo; methods/variables speed up execution. I saw the concept appear in Python Cookbook but never really understood how it worked (e.g. why would calling a function twice in a loop vs. assigning a local variable to the <em>exact same function</em> make any difference?). At least to some degree, I imagine this connects to the factors I mentioned about (objects as giant, dynamically modifiable bags), though I never connected the two in my mind before this.</li>
<li>Read about the theory behind <a href="http://en.wikipedia.org/wiki/Just-in-time_compilation">JIT compilers</a>. It&rsquo;s fascinating stuff. I&rsquo;m interested in potentially making one to more deeply understand the concept. Alas, I think this is a the general theme of the topics I&rsquo;m exploring, which creates a bit of an issue with the reality of how much time I have in a day&hellip;</li>
<li>Read about various <a href="http://www.codinghorror.com/blog/2007/04/pick-a-license-any-license.html">open source licenses and why I should include one</a>. I like the MIT license, personally. Short, sweet, gives credit and doesn&rsquo;t inhibit for-profit use (probably relates to my own business-friendly bias and what i like to personally see).</li>
<li>Read random posts on <a href="http://www.boredomandlaziness.org/">Nick Coghlan&rsquo;s blog</a>; interesting to get a better sense of the Python community</li>
<li>Hacker School rooftop party &mdash; it was basically all of the coordinators&#8217; birthdays at once. Fun times, fun conversations, and I got a lot of charcoal on myself dealing with the &ldquo;grill&rdquo; (it was basically a fire-pit). Met a lot of great people who are doing some pretty impressive things (&hellip; though we regularly have various software world luminaries come into Hacker School or show up in our internal communications/Humbug anyhow &mdash; fascinating how small the world is and tight knit it is).</li>
</ul>


<h2>23 Jun 2013</h2>

<ul>
<li>Read about Python 3 development and <a href="http://docs.python.org/devguide/coredev.html">how to be a core developer</a>&hellip; not sure about core developer-ship &mdash; I&rsquo;m definitely not there right now &mdash; but I would like to contribute to the Python language in some way. It&rsquo;ll be interesting to keep track and see if I get to a place where I can help out on any of the <a href="http://ncoghlan_devs-python-notes.readthedocs.org/en/latest/index.html">major places where the community needs help</a></li>
<li>Set up julia-mode for emacs,</li>
<li>Read about <a href="http://net.tutsplus.com/articles/interviews/should-you-learn-coffeescript/">CoffeeScript</a>. It&rsquo;s an interesting idea, though I certainly need more practice with base javascript first.</li>
<li>Diverted to CSS preprocessors (SASS and LESS) at least temporarily. Compass seems to give the advantage (somewhat) to SASS, but it seems unlikely that LESS wouldn&rsquo;t include something like it eventually. Given my dislike of working with CSS&rsquo;s syntax/concept in general though, I might try to stay with Bootstrap and AngularJS &mdash; I don&rsquo;t mind someone else figuring out what the right kerning/sizing/font for various headers are and adjusting from there.</li>
<li>Julia workshop with Leah! Intro to the Julia programming language.</li>
</ul>


<h2>24 Jun 2013</h2>

<ul>
<li><a href="http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems">Ninety-Nine Haskell Problems</a>, did some of these for <a href="https://github.com/j-wang/99-Haskell-Problems">Haskell practice</a></li>
<li>Wrote a hook to allow my tictactoe AI to play online against other tictactoe AIs. In the process, I got to know Python&rsquo;s urllib a lot better. Unfortunately, I still can&rsquo;t figure out the server&rsquo;s exact API &mdash; and I figure it isn&rsquo;t worth any more effort to fine-tune it, since I won&rsquo;t be getting much learning out of the exercise at this point other than what I need to connect to this specific server.</li>
<li>Code review with Laura on tictactoe &mdash; helpful to hear feedback on code that I did previously, and to see how much I&rsquo;ve improved/wouldn&rsquo;t write things the way I did just a few months ago. It&rsquo;ll be useful to go back and do some code revisions/refactoring myself to crystallize some of my improvement over time (which is hard to see otherwise).</li>
<li>Reviewing <a href="http://git-scm.com/book/en/">Git Pro</a> in preparation for GitHub training at Jane Street</li>
<li>Listened to a talk by Carin Meier on controlling robots and drones using Clojure! It was hosted by Etsy, which definitely was an interesting location (with a very quirky office).</li>
</ul>


<h2>25 Jun 2013</h2>

<ul>
<li>Went to Intermediate/Advanced Git tutorial hosted at Jane Street Capital this morning. It started a bit slow, but was really useful in bolstering my understanding of the tool, especially coming from a non-professional (programming) background and never having used a lot of the collaboration or branching functionality in a serious way.</li>
<li>Reading <a href="http://db.cs.berkeley.edu/papers/cidr11-bloom.pdf">Berkeley Bloom paper</a> in preparation for Systems discussion group.</li>
<li>Did a code reading for one of the earliest commits for bottle (commit HEAD~820 / SHA hash: 4f50cece28b8ee3ff1c5bcf3f8a7bd1d3bbf6128). It&rsquo;s really interesting to see how the author put together the pieces of it and the design decisions that went into it. My group also discovered a bad bug in the regex/special URL handling that I imagine got fixed in the later revisions (bottle sequentially loops through a list of regexes to match against a URL &mdash; however, this means a more general regex will always match first; compounding on this, there&rsquo;s a semi-random optimizing process that brings more frequently matched regexes forward in the list&hellip; which in the case of a very general match, would ultimately and self-reinforcingly end up in front and block any other matches from ever being reached).</li>
<li>Coming out of the bottle code reading session, I worked with my group in wrangling with the Python <code>@property</code> decorator (and decorator syntax more generally) and <code>@x.setter</code> syntax</li>
<li>Talked with Tom and learned about &ldquo;magic methods&rdquo; and how they work (<code>__get__</code>, <code>__set__</code>, <code>__setattr__</code>, <code>__getattr__</code>, <code>__setattribute__</code>, <code>__getattribute__</code>) &mdash; really interesting, and much more magic than I expect most users would need/understand&hellip; That being said, to really get to understand/know Python, I&rsquo;ll definitely need to understand how those work and how they fit into its evaluation model.</li>
<li>More learning about monads in Haskell from <a href="http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html">yet another blog post</a>. I did a fair number of the exercises, which was useful. I haven&rsquo;t uploaded them to github, but maybe I will later (if I finish them).</li>
<li>For the heck of it, I did learn how <a href="http://lambda.jstolarek.com/2012/10/code-testing-in-haskell/">Haskell testing frameworks work</a> (test-framework, HUnit, QuickCheck2), through testing my Monads tutorial exercises. This definitely was not the cost-effective project to learn this from (given that I probably didn&rsquo;t need tests at all), but I did need to learn sometime. In general, I should tighten up my testing discipline &mdash; out of the major &ldquo;best practices&rdquo; (clean, readable code, clear documentation, etc.), I am currently the most lax/entirely negligent on rigorous and systematic testing. I rely on my &ldquo;mental interpreter&rdquo; too much, which while important, shouldn&rsquo;t substitute for good tests. Not being a professional programmer, I just have never needed the discipline.</li>
<li>In the same vein (best practices and getting to know the Haskell ecosystem at least), I&rsquo;ve been learning about how Haskell modules work.</li>
<li>Reading from Computer Systems: A Programmer&rsquo;s Perspective (Bryant, O&#8217;Hallaron); probably going to continue reading this book and try to do questions from it</li>
</ul>


<h2>26 Jun 2013</h2>

<ul>
<li>Finished reading <a href="http://www.bloom-lang.net/calm/">Bloom paper</a> and researching <a href="http://databeta.wordpress.com/2010/10/28/the-calm-conjecture-reasoning-about-consistency/">CALM</a> principles. These weren&rsquo;t actually the papers I was supposed to read though&hellip; I&rsquo;m hoping they give me a better foundational understanding for Dedalus paper, which we are actually discussing.</li>
<li>Briefly went through <a href="https://en.wikipedia.org/wiki/Logic_programming">logic programming</a>, in order to better understand the Dedalus paper; I certainly barely scratched the surface, but I understand the basics of it now &mdash; hopefully enough for the paper &mdash; after seeing examples like the <a href="https://en.wikipedia.org/wiki/Horn_clause">Horn clause</a>. Formal logic from philosophy in college is starting to come back to me&hellip;</li>
<li>Discussed <a href="http://www.eecs.berkeley.edu/Pubs/TechRpts/2009/EECS-2009-173.pdf">Dedalus</a> with Systems reading paper group &mdash; I have a better sense of it now after working through it with the group, though I still don&rsquo;t entirely understand how Dedalus gracefully handles asynchronous data/information &mdash; at least not explicitly. I do understand the idea of how the time stamps would work with eventual consistency (rules come in later that help lead to consistency), but not how they literally make this happen. I&rsquo;ll reread the paper later, but that part seemed a bit fuzzy (though there were certainly enough dense sections that I could have missed it).</li>
<li>More discussion on monads, functors, and their mathematical properties with Nabil, Alex, and Alice</li>
<li>Listened to a talk about <a href="http://www.youtube.com/watch?v=fHK-uS-Iedc">miniKanren</a></li>
<li>Set up <a href="http://j-wang.net">octopress blog</a> on github pages with custom domain</li>
<li>Migrated posts (or at least downloaded them) from my Blogger blog</li>
<li>Updated blog colors, poked around how octopress/jekyll liquid templates work</li>
<li>Haskell meetup: I Accidentally the Entire Heap: How I Learned to Love the Profiler. Listened to <a href="https://www.bitba.se/i-accidentally-the-entire-heap/">this presentation</a>. If nothing else, this definitely served as a wake-up call for me to pay a <em>lot</em> more attention to how laziness affects the evaluation of Haskell programs. I imagine my lack of mental model familiarity with it is going to bite me at some point (probably sooner rather than later). Aside from the content of the meetup, I also thought that it was really interesting to see the strong (and seemingly consistent, based on peoples&#8217; familiarity with each other) community around the language. I&rsquo;m going to look forward to seeing what sort of communities there are in the Bay Area.</li>
</ul>


<h2>27 Jun 2013</h2>

<ul>
<li>Came in early this morning to participate in a Javascript seminar led by Mary on javascript (of course) and higher order functions</li>
<li>Discussed characteristics of <code>this</code> in javascript along with how closures work in javascript with Mary</li>
<li>Finished pretty basic implementation (after discussing with Mary) for <a href="https://github.com/j-wang/javascript-exercises">map and reduce</a>. My misunderstanding of <code>this</code> was definitely holding me back from writing better patterns. However, I don&rsquo;t think I love the particular quirks in javascript or its general evaluation/scoping model (yeah, I know, join the club, right?).</li>
<li>Worked a bit more on my <a href="http://j-wang.net">blog</a> (this post will actually be on my blog &mdash; very meta, huh?). Pushed/uploaded posts from my old blog (which is still linking to my blogger site for images&hellip; definitely need to fix that) and pushed updated color scheme. Nothing dramatic, but I do like the slight dash of subtle color, vs. the default octopress black on gray, on white.</li>
<li>It seems I have ended up working a bit longer on my site than I expected. I messed up and did <code>git checkout source</code> (which was behind my detached HEAD in git) &mdash; needed to do a bit of recovery with <code>git reflog</code> and moving everything up to the most-updated blog state. It seems the git tutorial came in handy very quickly after all.</li>
<li>While working on my site anyway, I debugged Disqus comments not working on my site&hellip; after digging into the liquid template, it looked like I needed to specify the comments = true in the front-matter for each page.</li>
<li>I started writing my untyped lambda calculus interpreter in Python (which I probably should have started a few days ago). <a href="https://github.com/j-wang/untyped-lambda-calculus-interpreter">Here&rsquo;s the link to it</a>, though it definitely isn&rsquo;t ready for prime time&hellip; or even to be run. I&rsquo;m currently only as far as the lexer.</li>
<li>I also started it in Haskell (actually flipping between the two for a while&hellip;), but I don&rsquo;t think I have enough experience in it yet to do so efficiently, even though it&rsquo;s likely the more natural fit for an interpreter.</li>
<li>While writing the lexer, I learned a lot about regular expressions (specifically for Python, but also more broadly applicable). Funny how these projects end up creating paths that help me learn things that I never thought I would when I began the project&hellip; (though I probably should have anticipated this for an <em>interpreter</em>).</li>
<li>Read some of &ldquo;The Mythical Man Month.&rdquo; It&rsquo;s a very interesting book. Many of the principles/challenges are similar to what I saw in the investment world (creative, technical field). Essentially, I take away that it&rsquo;s important (as I learned in that field) to manage so that you can accomplish what you need to do with a realistic amount of time and available resources &mdash; to crunch it is just to create a train wreck. You might get halfway to your goal, but you didn&rsquo;t get all the way and left a large mess that you&rsquo;ll need to clean up later. I&rsquo;m pretty happy that the field in general seems to care deeply about craftsmanship and code beauty though.</li>
</ul>


<h2>28 Jun 2013</h2>

<ul>
<li>Played D&amp;D with other batch members &mdash; never played before, so it was interesting and fun. I definitely can imagine that one&rsquo;s experience will depend greatly on the group you gather though. Fortunately, we have a good one among Hacker Schoolers!</li>
<li>Read more of &ldquo;The Mythical Man Month&rdquo;</li>
<li>Slowest coding day since I started Hacker School, but at least there was great bonding time!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AI for Tic-Tac-Toe]]></title>
    <link href="http://j-wang.net/blog/2013/06/21/ai-for-tic-tac-toe/"/>
    <updated>2013-06-21T20:28:00-04:00</updated>
    <id>http://j-wang.net/blog/2013/06/21/ai-for-tic-tac-toe</id>
    <content type="html"><![CDATA[<p>As part of my Hacker School application, I wrote a simple <a href="https://github.com/j-wang/hacker-school/blob/master/tictactoe.py">Tic-Tac-Toe application</a> for my &ldquo;program written from scratch.&rdquo; My choice was driven primarily by the fact that the application itself suggested a Tic-Tac-Toe application. As such, I expected many other people would write Tic-Tac-Toe (I was very right in this regard) and wanted to do something unique. My original ambitious plan was to write an AI for it. Unfortunately, I had to quickly abandon this plan, since I realized 1) I had no idea how I would go about creating one, and 2) I didn&rsquo;t have enough time to figure it out before the application was due. As such, I had to settle for infinitely expandable Tic-Tac-Toe (theoretically anyway &mdash; at greater than 15 x 15, it becomes quite visually ugly).</p>

<p>Now that I do have the time, I definitely wanted to tackle writing an AI for Tic-Tac-Toe. However, I didn&rsquo;t want to just find and apply an algorithm. I wanted to have the full challenge and experience of working through how one would create an AI.<!-- more --></p>

<p>My basic idea for an AI was that it would play out possible future moves and pick the one that resulted in the best outcome for itself. Of course, the trick is how one calculates &ldquo;best outcome.&rdquo;</p>

<p>My first attempt involved counting the number of ways that a player could win vs. the number of ways an opponent could win and using this as the critera for determining the best next move. The main reason I decided to go this direction was simplicity of implementation: I had already implemented a complicated tallying/coordinate system in my Tic-Tac-Toe game&rsquo;s <code>Grid</code> class that I thought I could commandeer for this purposes. It also let me calculate best next moves for intermediate game-states, which appealed to me for implementing difficulty levels. The naive version of this method didn&rsquo;t work (the algorithm ignored one-move wins, preferring many ways to win over just winning), so I tried ramping up the value of a win to sys.maxint and penalizing longer chains to victory. Below, I show the primary logic behind the AI (full code is on <a href="https://github.com/j-wang/tictactoe_ai">Github</a>).</p>

<p>The basic algorithm involved is iterative recursive, which is a pattern that I&rsquo;m finding I like a lot in Python. Iteratively traverse all cells of the grid (breadth):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">traverse</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">XO</span><span class="p">,</span> <span class="n">move_acc</span><span class="p">):</span>
</span><span class='line'>    <span class="n">open_cells</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_open_cells</span><span class="p">(</span><span class="n">grid</span><span class="o">.</span><span class="n">cells</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dig_outcomes</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">cell</span> <span class="ow">in</span> <span class="n">open_cells</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dig_outcomes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dig</span><span class="p">(</span><span class="n">cell</span><span class="p">,</span> <span class="n">grid</span><span class="p">,</span> <span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">XO</span><span class="p">,</span> <span class="n">move_acc</span><span class="p">))</span>
</span><span class='line'>    <span class="n">solution</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dig_outcomes</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">solution</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then recursively &ldquo;dig&rdquo; into each of these cells by simulating the player whose simulated turn it was moving there on a deepcopied <code>Grid</code> (depth).</p>

<p>The complicated code below (difficult to read mainly because it builds off of elements of the <code>Grid</code> class that I never exposed or expected to expose) shows the digging. It returns a tuple with win-loss &ldquo;scores&rdquo;, and the moves it took to reach that outcome. The &ldquo;scores&rdquo; are actually a pair of scores: the first is based on the outcome (win/loss/tie &mdash; though wins with fewer moves are given higher scores) and the second is based on how many more ways the AI could have won (and how close it was) vs. the player. Since many outcomes can be the same (win in same number of moves), I use the relative number of paths and closeness to victory as a tiebreaker.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">dig</span><span class="p">(</span><span class="n">move</span><span class="p">,</span> <span class="n">grid</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">XO</span><span class="p">,</span> <span class="n">move_acc</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">depth</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">grid</span><span class="o">.</span><span class="n">winner</span><span class="p">():</span>
</span><span class='line'>        <span class="n">win_flag</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">grid</span><span class="o">.</span><span class="n">winner</span><span class="p">()</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">_XO</span><span class="p">:</span>
</span><span class='line'>            <span class="n">win_flag</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">maxint</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">move_acc</span><span class="p">)</span>  <span class="c"># short wins best</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">grid</span><span class="o">.</span><span class="n">winner</span><span class="p">()</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">_flip_player</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_XO</span><span class="p">):</span>
</span><span class='line'>            <span class="n">win_flag</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>  <span class="c"># losses are worst</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># remember that victory_routes are centered around 0</span>
</span><span class='line'>        <span class="n">adj_victory_route</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">_multiplier</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">grid</span><span class="o">.</span><span class="n">_victory_routes</span><span class="p">)</span>
</span><span class='line'>        <span class="n">opponent_closeness</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">adj_victory_route</span><span class="p">)</span>
</span><span class='line'>        <span class="n">opponent_ways</span> <span class="o">=</span> <span class="n">adj_victory_route</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">opponent_closeness</span><span class="p">)</span>
</span><span class='line'>        <span class="n">player_closeness</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">adj_victory_route</span><span class="p">)</span>
</span><span class='line'>        <span class="n">player_ways</span> <span class="o">=</span> <span class="n">adj_victory_route</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">player_closeness</span><span class="p">)</span>
</span><span class='line'>        <span class="n">diff</span> <span class="o">=</span> <span class="p">(</span><span class="n">player_closeness</span> <span class="o">*</span> <span class="n">player_ways</span> <span class="o">+</span>
</span><span class='line'>                <span class="n">opponent_closeness</span> <span class="o">*</span> <span class="n">opponent_ways</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="p">((</span><span class="n">win_flag</span><span class="p">,</span> <span class="n">diff</span><span class="p">),</span> <span class="n">move_acc</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">new_grid</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span>
</span><span class='line'>        <span class="n">new_moves</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">move_acc</span><span class="p">)</span>
</span><span class='line'>        <span class="n">r</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">move</span>
</span><span class='line'>        <span class="n">new_grid</span><span class="o">.</span><span class="n">fill_cell</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">XO</span><span class="p">)</span>
</span><span class='line'>        <span class="n">new_moves</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">move</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">traverse</span><span class="p">(</span><span class="n">new_grid</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_flip_player</span><span class="p">(</span><span class="n">XO</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">new_moves</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This kind of worked. The AI very often made the &ldquo;right&rdquo; move, but sometimes did stupid things. I&rsquo;m pretty sure it was because I just multiplied together closeness to victory and ways to victory naively (implicitly weighting sure victories the same as many possible, but unlikely victories). I could have refined this further, and I still think there is some value to a path like this, since I can actually create more or less smart AIs by this method, but it would have taken much more trial-and-error tweaking of how I weighted various factors. The bigger problem was acutally that it was too slow &mdash; turns out copying huge <code>Grid</code> objects over and over again down an entire tree of possible outcomes is really slow. Who would have thunk it? I didn&rsquo;t want to reimplement all of the logic I created to track number of ways to win, so I decided to go down a different route.</p>

<p>One thing I realized was that I didn&rsquo;t have to track <em>every</em> move. I just needed to track the opponent&rsquo;s <em>best</em> moves and my AI&rsquo;s responses to those moves. Now, what about best? As said, I didn&rsquo;t want to reimplement a bunch of <code>Grid</code>&rsquo;s logic. If I gave up the idea of intermediate scoring, I could just determine the best move (for either player) by the one that ultimately resulted in victory at the last move&hellip; and then recursively choose the moves that give each player a better chance of victory all the way up the chain. I didn&rsquo;t quite realize it until I talked to other fellow Hacker Schoolers, but in trying to not reimplement a bunch of victory logic, I appeared to have reinvented a form of the mini-max algorithm. It&rsquo;s also much shorter and cleaner (called <code>LeanComputerPlayer</code> in the Github code).</p>

<p>The new iterative breadth traversal (the board is now just a flattened list representation of the board, e.g. 0th element is the top left cell, 4th element is the center cell) using a list comprehension:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">descendants</span><span class="p">(</span><span class="n">moves</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">player</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">copy_ret</span><span class="p">(</span><span class="n">brd</span><span class="p">,</span> <span class="n">mv</span><span class="p">,</span> <span class="n">plyr</span><span class="p">):</span>
</span><span class='line'>        <span class="n">new_board</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>        <span class="n">new_board</span><span class="p">[</span><span class="n">mv</span><span class="p">]</span> <span class="o">=</span> <span class="n">plyr</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">new_board</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">solve_tree</span><span class="p">(</span><span class="n">copy_ret</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">mv</span><span class="p">,</span> <span class="n">player</span><span class="p">),</span> <span class="n">flip</span><span class="p">(</span><span class="n">player</span><span class="p">),</span> <span class="n">mv</span><span class="p">)</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">mv</span> <span class="ow">in</span> <span class="n">moves</span><span class="p">]</span>  <span class="c"># flip just switches players</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the new recursive depth/comparison function, which sums up 1s for AI wins and -1s for human wins. It chooses max ultimate win outcomes if player is AI, choose min if player is human &mdash; since the game is played to its end conditions, these are perfect inverses of one another:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">solve_tree</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">player</span><span class="p">,</span> <span class="n">move</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="n">moves</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_pos_moves</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>    <span class="n">winner</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_winner</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">moves</span> <span class="o">==</span> <span class="p">[]</span> <span class="ow">or</span> <span class="n">winner</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">winner</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="n">outcome_val</span><span class="p">[</span><span class="n">winner</span><span class="p">],</span> <span class="n">move</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_draw_value</span><span class="p">,</span> <span class="n">move</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">results</span> <span class="o">=</span> <span class="n">descendants</span><span class="p">(</span><span class="n">moves</span><span class="p">,</span> <span class="n">board</span><span class="p">,</span> <span class="n">player</span><span class="p">)</span>
</span><span class='line'>        <span class="n">min_or_max</span> <span class="o">=</span> <span class="nb">max</span> <span class="k">if</span> <span class="n">player</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">XO</span> <span class="k">else</span> <span class="nb">min</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">min_or_max</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">move</span> <span class="k">if</span> <span class="n">move</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>These two are helper functions within the <code>next_move</code> method in <code>LeanComputerPlayer</code>. They are kicked off by the last line in the method:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">return</span> <span class="n">solve_tree</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_board</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">XO</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it works (AI always wins or ties) and it&rsquo;s fast! The one optimization I made after this was to have the AI automatically pick the middle cell at the beginning of the game. Since traversing down the entire tree is an operation that takes n! steps where n is the number of starting cells (9 possible moves, with 8 possible next moves for each of the 9 starting moves, and then 7 moves for each of the 8 moves&hellip; and so on), calculating the first move is much slower than subsequent moves (9! moves to check vs. 8! which is 362,880 moves vs. 40,320) and also pointless since if the AI has the first move, we know the center cell is always the optimal solution. Again, this code is on <a href="https://github.com/j-wang/tictactoe_ai">Github</a>.</p>

<p>And thus, week three ends! I&rsquo;m looking forward to week four though at the moment, I don&rsquo;t quite know what I&rsquo;ll turn to next.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faces Game Web App]]></title>
    <link href="http://j-wang.net/blog/2013/06/14/faces-game-web-app/"/>
    <updated>2013-06-14T19:09:00-04:00</updated>
    <id>http://j-wang.net/blog/2013/06/14/faces-game-web-app</id>
    <content type="html"><![CDATA[<p>Last week, while working on my <a href="http://j-wang.net/blog/2013/06/07/first-project-simple-text-editor/">simple text editor</a>, I chatted with fellow Hacker Schoolers about what was actually being used in the industry nowadays for GUIs. The answer I most commonly heard was that the tech world had largely moved on to web (and mobile) apps. No one who I spoke to actually worked on desktop applications. The insight here is quite fascinating to me.</p>

<p>Developers and users are a chicken-and-egg problem. To get developers to work on a platform, you need users. To have users, you need a strong developer base that creates appealing and useful apps. It&rsquo;s a small sample set, but the lopsided nature of the sentiments suggest to me that either developers have a stronger lean towards web than users or the companies that work in web are much more interesting/appealing to the strong programmers that Hacker School selects for and attracts. Again, it&rsquo;s too small a sample set to draw sweeping conclusions, but it is an interesting data point. Nevertheless, these conversations helped point me to my next project: a web app.<!-- more --></p>

<p>I&rsquo;ve built static websites and played around with content management systems (CMS) like Wordpress in the past. In doing so, I&rsquo;ve played around with HTML and CSS. However, those have mainly been exercises of graphical tweaking. I&rsquo;ve never built a web app (dynamic content) before, which requires more understanding of how web sites serve content (requests and responses), knowledge of server/user data management (persistent storage and sessions/cookies), and at least a basic understanding of concurrency &mdash; though web frameworks largely abstract away the latter.</p>

<p>At the beginning of the week, I spent many productive hours working through tutorials and many less productive hours thinking about what web app to create and what language to write it in. I ended up defaulting to Python, since like last time my current goal is to focus on this area topic and not languages. In terms of web frameworks, a fellow batch-mate, <a href="http://skien.cc/">Erik</a>, suggested that I look at <a href="http://flask.pocoo.org/">Flask</a>, whose lightweight nature immediately appealed to me. For what I needed it for, it has easy-to-understand and extremely simple routing and templating functionality. There&rsquo;s still some magic in routing, but I&rsquo;m not quite prepared to write my own web framework and create HTML request-handling/responses myself quite yet.</p>

<p>Finally, I decided to create a &ldquo;Faces Game,&rdquo; based on a project from a prior batch. There was some demand for an updated version including our batch, and it had all of the elements I wanted: dynamic content, (minor) data management, login handling (since I wanted to restrict it to Hacker Schoolers), scraping (I wanted to dynamically retrieve information from the Hacker School website for posterity), and processing/handling scraped data. The code is on <a href="https://github.com/j-wang/faces-game">Github</a> and the app is live on <a href="https://enigmatic-hollows-9840.herokuapp.com/">Heroku</a>. There are definitely many improvements I can make to it: multiple difficulty levels, free-form responses, caching, OAuth vs. mechanize login, etc. but it served its learning purpose. I learned a lot about what HTML requests/responses contain, HTML GET and POST methods, how form data works, how HTML templates work, and how web servers work (along with, of course, a refresher on writing HTML/CSS). Given that these topics are non-specific to Python and Flask, post-project I found that I could helpfully pair with several other Hacker Schoolers on their web apps (whether they were Python/Flask or not). Although I&rsquo;m probably done with this web app, given their importance/prevalence I&rsquo;ll probably be revisiting web apps again in the future.</p>

<p>Only Hacker Schoolers can play the game, but screenshots from it are below.</p>

<p><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/faces_game_login.png' width='' height='' alt='Login screen for username/password.' title='Login screen for username/password.'><span class='caption-text'>Login screen for username/password.</span></span>
<span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/faces_game_select_batch.png' width='' height='' alt='Batch selection. This is dynamically scraped from the Hacker School website and will update for future batches.' title='Batch selection. This is dynamically scraped from the Hacker School website and will update for future batches.'><span class='caption-text'>Batch selection. This is dynamically scraped from the Hacker School website and will update for future batches.</span></span>
<span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/faces_game_guess.png' width='' height='' alt='Guess who this is? Screen that shows random Hacker Schoolers and a random selection of names.' title='Guess who this is? Screen that shows random Hacker Schoolers and a random selection of names.'><span class='caption-text'>Guess who this is? Screen that shows random Hacker Schoolers and a random selection of names.</span></span>
<span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/faces_game_after_guess.png' width='' height='' alt='Shows name, if you got it right, and listed skills of the Hacker Schooler.' title='Shows name, if you got it right, and listed skills of the Hacker Schooler.'><span class='caption-text'>Shows name, if you got it right, and listed skills of the Hacker Schooler.</span></span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Project: Simple Text Editor]]></title>
    <link href="http://j-wang.net/blog/2013/06/07/first-project-simple-text-editor/"/>
    <updated>2013-06-07T15:31:00-04:00</updated>
    <id>http://j-wang.net/blog/2013/06/07/first-project-simple-text-editor</id>
    <content type="html"><![CDATA[<p>I have a lot of project ideas that I want to play around with during Hacker School. However, my primary goal &mdash; the thread that ties all of these disparate ideas together &mdash; is to tackle areas of programming that I have never encountered. If an area of programming is &ldquo;magical&rdquo; to me, I want to dispel that magic.</p>

<p>First up on that list of &ldquo;magical&rdquo; topics is graphical user interfaces (GUIs). I remember trying to experiment with GUIs in a group project during high school Java using Swing and AWT. I also remember quitting out of disgust after only a brief foray into their APIs, leaving one of my poor teammates the painful task of programming our project&rsquo;s GUI, while I worked on fun game logic. Since that brief attempt, I have never attempted to play around with GUIs ever again, so I have remained mystified as to how I would actually go about creating them. So, after nearly a decade, I&rsquo;ve decided to try my hand at it again.<!-- more --></p>

<p>Given my learning goal, I wanted a project whose primary component was the GUI. After a bit of brainstorming, I settled on a basic text editor. No spell-check, no fonts, and no fancy functionality. I wasn&rsquo;t looking to recreate Word or Emacs. I just wanted something to play the role of mannequin for my GUI.</p>

<p>I also debated a bit which language I should use. Clojure and Python were the primary contenders. I&rsquo;m pretty curious about Clojure, and its Java interop would give me access to Swing and AWT, but after seeing the state of those frameworks (not much different than when I was in high school) and realizing that I&rsquo;d spend a lot more time wrestling with Clojure and Java frameworks than learning, I decided to go with Python and potentially revisit Clojure later. Python is the (mainstream) programming language I know best (alas for poor frozen and academic SML) and I&rsquo;ve heard good things about Tkinter.</p>

<p>The end result is on my <a href="https://github.com/j-wang/simple-text-editor">Github</a>. A screenshot is below.</p>

<p><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/python_texteditor.png' width='' height='' alt='True to its name, it is quite simple' title='True to its name, it is quite simple'><span class='caption-text'>True to its name, it is quite simple</span></span></p>

<p>The process of building the GUI was all right. It was less painful than I had expected, probably in part because I&rsquo;m a more experienced programmer now and Tkinter is simpler than Swing/AWT. However, I probably won&rsquo;t focus much more on GUIs specifically after this project. I&rsquo;m glad I did it, since I will know how to approach creating GUIs in the future, but it was more an exercise of learning APIs and painstakingly laying out each element in code than it was a &ldquo;hard problem&rdquo; that stretched me as a programmer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Begins]]></title>
    <link href="http://j-wang.net/blog/2013/06/03/hacker-school-begins/"/>
    <updated>2013-06-03T23:34:00-04:00</updated>
    <id>http://j-wang.net/blog/2013/06/03/hacker-school-begins</id>
    <content type="html"><![CDATA[<p>Hacker School has finally begun! The past few days have been a whirlwind of activity. Last week, I finished my last day at work, Liz and I packed up our apartment and got it loaded on a truck for California, loaded the rest of our stuff into the car, moved to NYC, and made an extremely difficult decision which coast we wanted to be on (Liz for her engineering/design programs, and me for business school).</p>

<p>It&rsquo;s been exhausting, mentally and physically, and I haven&rsquo;t had much sleep at all. The exit schedule will be just as crazy. Just like how I left work and hit the ground running in NYC for Hacker School, I&rsquo;m going to have to leave Hacker School a week early on Friday and start business school at Berkeley on Monday.</p>

<p>Ah well, I knew what I signed up for, and I wouldn&rsquo;t miss this opportunity for a piddling few months of &ldquo;break.&rdquo; This will be my break. I&rsquo;m exhilarated to spend three months becoming a better programmer, surrounded by people trying to do the same thing. Hearing about what some of my batch-mates do and plan to do when I met them this morning was great. There&rsquo;s a lot of experienced programmers here that I look forward to working with and learning from. Here&rsquo;s to <a href="https://www.hackerschool.com/">never graduating</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Barefoot Running and Half Marathons]]></title>
    <link href="http://j-wang.net/blog/2013/03/28/barefoot-running-and-half-marathons/"/>
    <updated>2013-03-28T00:00:00-04:00</updated>
    <id>http://j-wang.net/blog/2013/03/28/barefoot-running-and-half-marathons</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been &ldquo;barefoot running&rdquo; now for about a year at this point. Overall, I think the results have been better than expected &mdash; though my original expectations were pretty low.</p>

<p>While some people get into barefoot running because they&rsquo;ve read about the <a href="http://en.wikipedia.org/wiki/Tarahumara_people">Tarahumara</a>, decided it&rsquo;s the secret behind African Olympic success in running, or heard some interesting biomechanical or evolutionary argument, I admit that I primarily got into it because the shoes are more compact and easier to carry in my work bag (my company has a gym). Given that benefit, I decided I&rsquo;d just hope that some of the other touted benefits were true.</p>

<div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/vibrams.JPG' width='' height='' alt='My Vibram Fivefingers. These squish a lot better than running shoes.' title='My Vibram Fivefingers. These squish a lot better than running shoes.'><span class='caption-text'>My Vibram Fivefingers. These squish a lot better than running shoes.</span></span></div>


<!-- more -->


<p>One lesson that I would impart on those who might be interested in also trying out barefoot running is to take it slow. For instance, no matter what you do, don&rsquo;t make your first major experience barefoot running your first time running a half-marathon. If you do, you might look like this guy:</p>

<div align='center'><div align='center' style='max-width: 460px;'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/running1.png' width='214' height='299' alt='What a glamour shot. An example of one of many pictures of me taken during the NY13.1. I'll happily buy one of these race photos when someone actually manages to take a flattering one.' title='What a glamour shot. An example of one of many pictures of me taken during the NY13.1. I'll happily buy one of these race photos when someone actually manages to take a flattering one.'><span class='caption-text'>What a glamour shot. An example of one of many pictures of me taken during the NY13.1. I&#8217;ll happily buy one of these race photos when someone actually manages to take a flattering one.</span></span></div></div>


<p>This was the Allstate New York 13.1 around April of last year. I didn&rsquo;t do too badly for my first half-marathon &mdash; 2:09:28, which is a little under 10 minutes a mile. However, one thing that&rsquo;s definitely true with barefoot running and Vibrams is that you <em>feel</em> the road much more. That&rsquo;s usually billed as a good thing. That&rsquo;s actually less of a good thing near the end of 13 miles, feeling every dip, chip, and rock in the road on your blistering feet.</p>

<p>Now, I didn&rsquo;t actually go run the half marathon entirely unprepared. I exercise pretty regularly, and during this particular month started ramping up my regime to 3-5 miles each workout (I normally do one at a very fast pace each workout). Despite this (admittedly sparse, but not zero) preparation, the two things that really got me were not enough callouses on the side of my toes and on the ball of my foot (they ripped and tore from the unfamiliar motion/shoes), and not enough calf conditioning.</p>

<p>The rips and tears are self-explanatory and probably could stand for me not making them any more graphic. Nowadays, I wear &ldquo;toe socks&rdquo; so that I don&rsquo;t get as much chaffing, which seem to work pretty well (if only I&rsquo;d used them for any of my races&hellip; oh well, next time&hellip;). On the calf side, there was a week or two of limping and very staccato stair-stepping (couldn&rsquo;t really bend my legs too well &mdash; I kind of looked like a clockwork toy clattering down stairs).</p>

<p>Despite my complaining, running barefoot did have one particularly large benefit for me &mdash; the lack of &ldquo;arch pain.&rdquo; Before barefoot running, I&rsquo;d always had extreme pain in my arches (which are actually less arches and more, well, lines) whenever I ran for long periods of time. I originally thought that it had to do with my shoes, but it didn&rsquo;t seem like any particular pair of shoes made the problem go away (I had a pair of New Balances that helped a bit, but didn&rsquo;t fix it). Although the pain went away a few hours after running, it always vaguely worried me since it didn&rsquo;t feel particularly healthy. This time, though I certainly had other complaints, I didn&rsquo;t have this particular problem.</p>

<p>Since then, I&rsquo;ve run another half marathon and a 10k. Both have been &ldquo;barefoot&rdquo; in Vibrams. I think I&rsquo;ll definitely keep running these races, since they give me good exercise &ldquo;goals,&rdquo; which I&rsquo;ve lacked since college crew and martial arts. I&rsquo;ll probably also continue to run barefoot as well &mdash; the shoes are still compact and on net it does seem beneficial. Now, if only I could be more photogenic during these things&hellip;</p>

<div align='center'><div align="center" style="width: 450px;"><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/running2.png' width='' height='' alt='Another example of a photo of me during the Fairfield run. Again, would I like to "forever remember" looking like I'm vaguely constipated?' title='Another example of a photo of me during the Fairfield run. Again, would I like to "forever remember" looking like I'm vaguely constipated?'><span class='caption-text'>Another example of a photo of me during the Fairfield run. Again, would I like to &#8220;forever remember&#8221; looking like I&#8217;m vaguely constipated?</span></span></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strange Prank Idea]]></title>
    <link href="http://j-wang.net/blog/2013/03/18/strange-prank-idea/"/>
    <updated>2013-03-18T00:00:00-04:00</updated>
    <id>http://j-wang.net/blog/2013/03/18/strange-prank-idea</id>
    <content type="html"><![CDATA[<p>Liz and I were recently up in Philly when I got an idea for a prank that I&rsquo;m a couple years too old for at this point. Liz got into UPenn&rsquo;s Integrated Product Design master&rsquo;s program last week, so we were visiting the city and school to get a sense of whether or not she&rsquo;d like the program.</p>

<p>At one point, going around the city, we saw this statue very prominently stationed at an intersection.</p>

<div align="center" style="text-align: center;"><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/maybe_socrates.jpg' width='' height='' alt='Deep thought.' title='Deep thought.'><span class='caption-text'>Deep thought.</span></span></div>


<!-- more -->


<p>It kind of looked like it was supposed to be Socrates or something. However, the odd thing was how worn it was. The features were extremely indistinct and it kind of looked like someone had sandblasted it. I doubt that its appearance was caused by the wear of time, since it didn&rsquo;t look that old. In reality, some sculptor had probably decided that this was an interesting (if odd) style.</p>

<p>Now, even though it probably wasn&rsquo;t how it actually got this way, what if someone did&nbsp;sandblast (or sandpaper) it and just left it in this state?</p>

<p>Then, I got to thinking &mdash; how baffling and strange a prank would it be to find a statue and in the middle of the night sand it down? I&rsquo;m imagining stone statues, wooden cigar store Indians, or one of those foam statues of famous characters sometimes in front of video/comic book stores beckoning you in. You would leave it recognizable, but just make the features indistinct. Make it fuzzy. Then, after doing the deed, you would clean away the dust to make it look like nothing ever happened. I would imagine, for at least a few seconds, maybe up to a minute, someone familiar with the statue would go up to it and be completely baffled, trying (and perhaps failing) to comprehend what happened. A true epistemological mystery. The idea of bafflement and people trying to figure out what happened, along with the pure physical difficulty in executing the prank (partially what makes it so unthinkable), is what makes this so amusing to me. After all, I was baffled myself with this statue and it probably isn&rsquo;t even what happened here.</p>

<p>As said, I&rsquo;m too old for this since this is more of a college kid type of thing (especially since it might be a LONG night of sandpapering). Though, admittedly, even when I was in college I likely wouldn&rsquo;t have done this, since I think I&rsquo;d feel bad for whoever created the statue and for those who actually liked it (unless the statue was really bad). Thinking about it did give me a moment of devious (philosophical) amusement though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi for Valentine's Day]]></title>
    <link href="http://j-wang.net/blog/2013/02/22/raspberry-pi-for-valentines-day/"/>
    <updated>2013-02-22T00:00:00-05:00</updated>
    <id>http://j-wang.net/blog/2013/02/22/raspberry-pi-for-valentines-day</id>
    <content type="html"><![CDATA[<p>For Valentine&rsquo;s Day, I surprised Liz with an iPad Mini. We were selling her current Macbook Air because it just didn&rsquo;t have the power to run Solidworks, Autocad, and other technical programs she&rsquo;d soon need for her engineering/design classes. However, she attached a fair amount of sentimental value to that particular Macbook Air (it was another surprise gift from me). I figured I&rsquo;d at least update the sentimental value with the iPad because it filled her need for a portable device and she had liked the Mini when we visited an Apple Store recently.</p>

<p>For her gift, she surprised me with a Raspberry Pi. In a pie.</p>

<p>Apparently, she had searched for a good &ldquo;pie proxy&rdquo; as a presentation tool for the Raspberry Pi but eventually, for lack of a better option, settled on an actual pie (blueberry, but close enough). I don&rsquo;t have a picture of the pie, unfortunately, but I do have a picture of the blueberry stained box, which I vacuum sealed afterwards in case I needed any of the numbers on it (it&rsquo;d otherwise be sticky and good luck cleaning off the box without destroying it).</p>

<div align='center'><div align='center' style='width: 310px;'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/raspberry_pi.jpg' width='' height='' alt='I suppose this might have been a problem if I needed to return it.' title='I suppose this might have been a problem if I needed to return it.'><span class='caption-text'>I suppose this might have been a problem if I needed to return it.</span></span></div></div>


<p>I suppose we&rsquo;re a bit of an odd couple, but I wouldn&rsquo;t have it any other way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sous Vide Porchetta]]></title>
    <link href="http://j-wang.net/blog/2012/10/06/sous-vide-porchetta/"/>
    <updated>2012-10-06T00:00:00-04:00</updated>
    <id>http://j-wang.net/blog/2012/10/06/sous-vide-porchetta</id>
    <content type="html"><![CDATA[<p>One thing that has bothered me about all of my experimentation with sous vide cooking is that everything that I&rsquo;ve done could technically be done with normal cooking methods. Despite making the best chicken, steak, and poached eggs (or the only poached eggs) that I&rsquo;ve ever made, it was possible for me to still cook this food with more conventional methods. I wanted something that is largely unachievable with any other method.</p>

<p>Enter the deep-fried porchetta, which I was inspired to make from <a href="http://www.seriouseats.com/2011/12/the-food-lab-deep-fried-sous-vide-36-hour-all-belly-porchetta.html?ref=search">this recipe</a></p>

<p>It pretty much captures <a href="http://j-wang.net/blog/2012/01/29/theory-of-sous-vide/">what I love</a> about sous vide &mdash; the ability to separate sterilizing food from creating the texture of food. Porchetta is hard because it&rsquo;s difficult to fully cook the meat, keep the inside tender, and make the outside crispy (but not dry) all at the same time. That&rsquo;s because there&rsquo;s only one blunt object method of cooking it used (dry heat blasted outside in). Here, we can elegantly separate the parts (sterilization and tenderizing, vs. crisping&hellip; or deep-frying) by using separate cooking techniques, the key ones being sous vide and deep-frying. I couldn&rsquo;t wait to try it.</p>

<!-- more -->


<p>Because this thing was going to need to run overnight, I didn&rsquo;t want to chance burning down my apartment with my homemade sous vide machine. I figured I made enough food with sous vide that it would be worth it to finally spring for a real immersion circulator (Williams-Sonoma&rsquo;s Sous Vide Professional, after deciding that it was too much trouble making sure used lab circulators on Ebay didn&rsquo;t have deadly residue).</p>

<p>The recipe above calls for pork belly, but I didn&rsquo;t want to do pork belly. I couldn&rsquo;t find it at my local butcher (&hellip; Stop-and-Shop) and I make food to eat over many meals. Pork belly would be too rich and would become painful to continue eating relatively quickly (it&rsquo;s quite far past the <a href="http://www.nytimes.com/2009/06/23/health/23well.html?_r=0">bliss point</a>). Instead, I chose to go with 10lbs of skin-on pork shoulder, which I got tied and scored at Stop-and-Shop (it&rsquo;s important to get it tied &mdash; refuse to get it scored if you must, but the thing will fall apart on you if you don&rsquo;t have extra support from the ties).&nbsp;I figured it was a bit of a waste to go much smaller, since I&rsquo;d still have the fixed cost of going through all the steps of making this thing regardless of how big it was. As it turns out, if I went smaller, I might have ended up with less oil burns and less stress trying to manhandle a massive hunk of hot pork, but hindsight is 20/20&hellip;</p>

<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_9462.JPG' width='' height='' alt='The pork shoulder fresh from the store. Looks far smaller at this distance than it feels trying to move it while hot.' title='The pork shoulder fresh from the store. Looks far smaller at this distance than it feels trying to move it while hot.'><span class='caption-text'>The pork shoulder fresh from the store. Looks far smaller at this distance than it feels trying to move it while hot.</span></span></div></div>


<p>After getting it back from the store, I prepared the spice blend I wanted to use (toasted fennel seed, black pepper, sage, rosemary, thyme, and crushed red pepper &mdash; I wanted to go with fennel pollen, but I took a look at the expense and decided maybe another time). The toasted fennel seed and black pepper mix gets pretty aromatic when you&rsquo;re making it, which is great. Make sure you don&rsquo;t use oil though, since it&rsquo;s meant to toast dry. After toasting the seeds and peppers on the stove until deep brown, I blended them and coated them onto the shoulder, along with the other spices.</p>

<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_9474.JPG' width='' height='' alt='Adding spices. Make sure to get it into the crevices and into the butterfly cut (if you actually got it -- I didn't here because I wanted to just go with the pre-tied meat). It's literally painful to tie your own meat if you're bad at slipknots (like I am).' title='Adding spices. Make sure to get it into the crevices and into the butterfly cut (if you actually got it -- I didn't here because I wanted to just go with the pre-tied meat). It's literally painful to tie your own meat if you're bad at slipknots (like I am).'><span class='caption-text'>Adding spices. Make sure to get it into the crevices and into the butterfly cut (if you actually got it &#8211; I didn&#8217;t here because I wanted to just go with the pre-tied meat). It&#8217;s literally painful to tie your own meat if you&#8217;re bad at slipknots (like I am).</span></span></div></div>




<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_9510.JPG' width='' height='' alt='Salt is also important. Even if you're worried about salt, most of it is going to "wash off" with the liquids that come out of the meat during cooking.' title='Salt is also important. Even if you're worried about salt, most of it is going to "wash off" with the liquids that come out of the meat during cooking.'><span class='caption-text'>Salt is also important. Even if you&#8217;re worried about salt, most of it is going to &#8220;wash off&#8221; with the liquids that come out of the meat during cooking.</span></span></div></div>




<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_9587.JPG' width='' height='' alt='The finished product. Well, raw finished product.' title='The finished product. Well, raw finished product.'><span class='caption-text'>The finished product. Well, raw finished product.</span></span></div></div>


<p>After patting the meat down well with spices and salt, I just needed to load it into the sous vide and used a jumbo hefty bag (2.5 gallons) as my &ldquo;vacuum bag.&rdquo; It was far more painful than the picture suggests given the size of this thing and the logistics of trying to load a 10 pound pork shoulder with one hand and keep the bag open with the other. Additionally, the hefty bag leaks slightly, which was annoying for me and could be even more problematic for you if you chose to buy one of those potentially deadly immersion circulators from Ebay. Prior to this episode, I always used simple ziplock bags, which basically work as well as vacuum seal bags for most applications and can actually handle liquids (which get sucked out by normal vacuum sealers, unless you spring for a chamber vacuum). If you lower a ziplock bag into warm-to-hot water, the pressure from the water (more heat = more molecular movement/bouncing) pushes out the air.</p>

<p>After this episode, I&rsquo;ve moved on to bulk vacuum seal bags (really big ones and 200 ft of them) bought from an online restaurant supply store to be used with a simple Foodsaver vacuum (which Liz got practically for free from a thrift store). But again, that&rsquo;s not to say that the simple technique doesn&rsquo;t work, which I want to emphasize because I&rsquo;ve heard from some people that the cost of the equipment deters them from cooking sous vide. If it wasn&rsquo;t for the fact that I&rsquo;d make porchetta again and was able to obtain the necessary equipment on the cheap, I&rsquo;d probably still be using ziplock bags.</p>

<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_9630.JPG' width='' height='' alt='This looks far smoother than it actually went.' title='This looks far smoother than it actually went.'><span class='caption-text'>This looks far smoother than it actually went.</span></span></div></div>




<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_9723.JPG' width='' height='' alt='Looks tranquil in there.' title='Looks tranquil in there.'><span class='caption-text'>Looks tranquil in there.</span></span></div></div>


<p>The recipe calls for 155 degrees F for 36 hours but I didn&rsquo;t want to wait that long. I squinted at bit at the pasteurization curves for meat and figured out that 165 degrees F for 24 hours would suffice instead to sterilize the pork. I expected that the temperature difference wouldn&rsquo;t have much of an adverse effect on the texture either.</p>

<p>When 24 hours finally passed, it was time to deep fry. I went with the recipe&rsquo;s suggestion to use a wok with oil (I used canola because of its high smoke point, relative healthiness, and price), since my thift-store deep-fryer isn&rsquo;t big enough and while I was fine with sous vide cooking with it, I&rsquo;m not confident enough in it to go high-temp with oil.</p>

<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_9769.JPG' width='' height='' alt='Pouring the canola oil. I suppose you can also call it a bit of inadvertent product placement for S&amp;S.' title='Pouring the canola oil. I suppose you can also call it a bit of inadvertent product placement for S&amp;S.'><span class='caption-text'>Pouring the canola oil. I suppose you can also call it a bit of inadvertent product placement for S&amp;S.</span></span></div></div>




<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_9780.JPG' width='' height='' alt='Looking for 300 to 350 degrees F. If you're waiting for 400, you'll blow past it since the temperature increase accelerates as you wait.' title='Looking for 300 to 350 degrees F. If you're waiting for 400, you'll blow past it since the temperature increase accelerates as you wait.'><span class='caption-text'>Looking for 300 to 350 degrees F. If you&#8217;re waiting for 400, you&#8217;ll blow past it since the temperature increase accelerates as you wait.</span></span></div></div>


<p>Dropping the thing into the wok was somewhat painful. I think I need rubber gloves since although the shoulder was cooked at sub-boiling temperatures, it is still really hot for bare hands. I first poured off the juice/sauce/drippings into a bowl for gravy later and (for lack of better tools) grabbed the pork with my hands and manhandled it into the wok. It made a nice dual oil splash from the impact and the contact of residual moisture with the oil. I would suggest getting rubber gloves.</p>

<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_9796.JPG' width='' height='' alt='Splattering away. Holding the thermometer while ladling hot oil over the top of the porchetta, as per the recipe. Note that metal candy thermometers get hot as you hold it in boiling oil.' title='Splattering away. Holding the thermometer while ladling hot oil over the top of the porchetta, as per the recipe. Note that metal candy thermometers get hot as you hold it in boiling oil.'><span class='caption-text'>Splattering away. Holding the thermometer while ladling hot oil over the top of the porchetta, as per the recipe. Note that metal candy thermometers get hot as you hold it in boiling oil.</span></span></div></div>


<p>Despite the pain, I&rsquo;d say the end results were worth it. When it was done, this thing was tender enough that one of the bones slid out on its own accord. But that&rsquo;s not even the best thing. Take a look at the skin.</p>

<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_9904.JPG' width='' height='' alt='You can practically hear the crisp in this picture.' title='You can practically hear the crisp in this picture.'><span class='caption-text'>You can practically hear the crisp in this picture.</span></span></div></div>




<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_9908.JPG' width='' height='' alt='As delicious as it looks. The meat the bottom came out with the bone when it slid out of the porchetta.' title='As delicious as it looks. The meat the bottom came out with the bone when it slid out of the porchetta.'><span class='caption-text'>As delicious as it looks. The meat the bottom came out with the bone when it slid out of the porchetta.</span></span></div></div>


<p>This experiment was definitely worth it and I&rsquo;ll be doing it again. The only problem is that it&rsquo;s hard to eat much porchetta in one sitting, but I suppose that I did want to get a lot of meals out of it&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DIY Immersion Circulator]]></title>
    <link href="http://j-wang.net/blog/2012/05/12/diy-immersion-circulator/"/>
    <updated>2012-05-12T00:00:00-04:00</updated>
    <id>http://j-wang.net/blog/2012/05/12/diy-immersion-circulator</id>
    <content type="html"><![CDATA[<p>For a few months now, I&rsquo;ve been using a $25 deep fryer I found at an estate sale to cook sous vide. It has a bit of a crack and is somewhat old, so I&rsquo;d probably hesitate using it for real deep frying, but I wasn&rsquo;t intending to deep fry with it anyway.</p>

<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/deep_fryer.jpg' width='' height='' alt='This thing was definitely a steal for the price... though maybe not for someone who actually wanted to do some deep frying -- you'd have to factor in potential medical bills.' title='This thing was definitely a steal for the price... though maybe not for someone who actually wanted to do some deep frying -- you'd have to factor in potential medical bills.'><span class='caption-text'>This thing was definitely a steal for the price&#8230; though maybe not for someone who actually wanted to do some deep frying &#8211; you&#8217;d have to factor in potential medical bills.</span></span></div></div>


<p>It has a built-in thermocouple, has a nice metal basket with handle to pull the heated food out when done, and already has its own (powerful) heating element &mdash; essentially it has all the components necessary for a good sous vide machine. I even tested its temperature accuracy against a trustworthy thermometer and it came out pretty close. What could be better? (Spoiler alert: There is something much better.)</p>

<!-- more -->


<p>Well, one problem is that the lowest temperature setting on it was still rather high. 175 degrees F, its lowest setting, is higher than the temperature you would use to cook most food sous vide. While I&rsquo;d be able to sterilize food in a reliable way, I can&rsquo;t use this thing (or at least its built-in temperature regulation) to get the tender, moist results most people associate with sous vide. The food I produce from this setup closer resembles the output of more conventional cooking techniques.</p>

<p>One solution I could take was to buy an external temperature regulator that simply switched the power for the deep fryer on and off. This would mean that I would be able to use its basket and heating element, but just substitute out the thermoregulation.</p>

<p>However, I stumbled across this post on <a href="http://seattlefoodgeek.com/2010/02/diy-sous-vide-heating-immersion-circulator-for-about-75">Seattle Food Geek</a> and decided that building my own solution would be much more fun. Plus, since this build would be for an immersion circulator type of device instead of an all-in-one machine like the deep fryer (or the Sous Vide Supreme), I could use any size container and accommodate any amount of food.</p>

<p>I essentially followed the instructions given on the site, though I made it modular (I plug in the heating element instead of having it built-in), and mine doesn&rsquo;t look nearly as slick.</p>

<p>There is also an element of electrocution risk in mine, since although I soldered the connections well and topped them with lens caps, there&rsquo;s still a fair amount of naked wire protruding (probably not good for an application that inherently involves being around a large amounts of water). I probably wouldn&rsquo;t feel comfortable leaving it on overnight. Pictures and explanations below:</p>

<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_0359.jpg' width='' height='' alt='Aquarium pump, needed to circulate the water. It should be on a separate circuit from the PID (temperature controller) since it needs to always be on, while the heating elements will be turned on and off based on the temperature.' title='Aquarium pump, needed to circulate the water. It should be on a separate circuit from the PID (temperature controller) since it needs to always be on, while the heating elements will be turned on and off based on the temperature.'><span class='caption-text'>Aquarium pump, needed to circulate the water. It should be on a separate circuit from the PID (temperature controller) since it needs to always be on, while the heating elements will be turned on and off based on the temperature.</span></span></div></div>




<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_0360.jpg' width='' height='' alt='Immersion heater coil. I decided to not build this thing into my setup and instead have a plug for it, since these coils apparently burn out easily. My setup, unfortunately, can't handle much more than one of these without itself burning out (the relay would blow up).' title='Immersion heater coil. I decided to not build this thing into my setup and instead have a plug for it, since these coils apparently burn out easily. My setup, unfortunately, can't handle much more than one of these without itself burning out (the relay would blow up).'><span class='caption-text'>Immersion heater coil. I decided to not build this thing into my setup and instead have a plug for it, since these coils apparently burn out easily. My setup, unfortunately, can&#8217;t handle much more than one of these without itself burning out (the relay would blow up).</span></span></div></div>




<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_0361.jpg' width='' height='' alt='Thermocouple. This is used to sense the temperature for the PID.' title='Thermocouple. This is used to sense the temperature for the PID.'><span class='caption-text'>Thermocouple. This is used to sense the temperature for the PID.</span></span></div></div>




<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_0362.jpg' width='' height='' alt='Switch. My little conceit, since given how basic my setup is, I could just plug it in/pull the plug for on/off.' title='Switch. My little conceit, since given how basic my setup is, I could just plug it in/pull the plug for on/off.'><span class='caption-text'>Switch. My little conceit, since given how basic my setup is, I could just plug it in/pull the plug for on/off.</span></span></div></div>




<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_0363.jpg' width='' height='' alt='The heart of the setup. The PID takes temperature information from the thermocouple and sends a signal to a relay to complete/break a circuit based on temperature. This model has its own electrical relay built-in. Somehow, Seattle Food Geek blog had a PID with an internal relay that could take three immersion heaters. Based on the electrical rating on mine... it can take basically one.' title='The heart of the setup. The PID takes temperature information from the thermocouple and sends a signal to a relay to complete/break a circuit based on temperature. This model has its own electrical relay built-in. Somehow, Seattle Food Geek blog had a PID with an internal relay that could take three immersion heaters. Based on the electrical rating on mine... it can take basically one.'><span class='caption-text'>The heart of the setup. The PID takes temperature information from the thermocouple and sends a signal to a relay to complete/break a circuit based on temperature. This model has its own electrical relay built-in. Somehow, Seattle Food Geek blog had a PID with an internal relay that could take three immersion heaters. Based on the electrical rating on mine&#8230; it can take basically one.</span></span></div></div>




<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_0365.jpg' width='' height='' alt='How the setup works. Thermocouple senses temperature, the pump circulates water, and the heater raises the temperature as needed (turns off when temperature is reached or about to be reached).' title='How the setup works. Thermocouple senses temperature, the pump circulates water, and the heater raises the temperature as needed (turns off when temperature is reached or about to be reached).'><span class='caption-text'>How the setup works. Thermocouple senses temperature, the pump circulates water, and the heater raises the temperature as needed (turns off when temperature is reached or about to be reached).</span></span></div></div>




<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_0366.jpg' width='' height='' alt='The aquarium pump (black plug) is meant to be separate from the PID-controlled circuit (white plug), since the pump needs to be always on, and the PID switches its circuit on and off based on temperature.' title='The aquarium pump (black plug) is meant to be separate from the PID-controlled circuit (white plug), since the pump needs to be always on, and the PID switches its circuit on and off based on temperature.'><span class='caption-text'>The aquarium pump (black plug) is meant to be separate from the PID-controlled circuit (white plug), since the pump needs to be always on, and the PID switches its circuit on and off based on temperature.</span></span></div></div>




<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_0367.jpg' width='' height='' alt='Heater gets plugged into the PID-controlled circuit. I used a cut up extension cord to make this.' title='Heater gets plugged into the PID-controlled circuit. I used a cut up extension cord to make this.'><span class='caption-text'>Heater gets plugged into the PID-controlled circuit. I used a cut up extension cord to make this.</span></span></div></div>




<div align='center'><div align='center'><span class='caption-wrapper'><img class='caption' src='http://j-wang.net/images/posts/IMG_0368.JPG' width='' height='' alt='The whole shebang.' title='The whole shebang.'><span class='caption-text'>The whole shebang.</span></span></div></div>


<p>I did think about using this setup to control my deep fryer, but quickly realized that the built-in relay in my PID is rated for voltage that is WAY lower. I would need to install a more robust external relay in order to actually be able to push the machine to be able to handle that kind of electrical throughput &mdash; at the moment, the PID is barely rated enough for more than one immersion heating element. Putting the external relay in would also require some rewiring to bypass the PID&rsquo;s relay element, which is probably more than I want to do in the near term (I actually have the solid state relay I want to use already). For now, I&rsquo;m pretty happy that I have something that will finally give me my perfectly cooked steaks, chicken, and anything else I want to toss into it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Theory of Sous Vide]]></title>
    <link href="http://j-wang.net/blog/2012/01/29/theory-of-sous-vide/"/>
    <updated>2012-01-29T00:00:00-05:00</updated>
    <id>http://j-wang.net/blog/2012/01/29/theory-of-sous-vide</id>
    <content type="html"><![CDATA[<p>This post gets a bit technical and geeky, but I think understanding the theory of cooking is pretty important to cooking well (and consistently). And I can&rsquo;t stop talking about to people in person anyway, so what the heck.</p>

<p>I&rsquo;ve experimented with a lot of different cooking techniques over time (clay bakers, pressure cookers, etc.), but nothing has really excited me as much as sous vide. What I really love about sous vide is that it lets you very cleanly separate the two essential goals of cooking:</p>

<ol>
<li>Sterilization of food</li>
<li>Tenderizing/texturizing food</li>
</ol>


<!-- more -->


<p>Now, what is it? Sous vide is a cooking technique that aims to evenly cook food through bringing it to a very precisely controlled, even temperature. How it is literally implemented is through placing food in vacuum sealed plastic bags, which are then placed in temperature-controlled water. Vacuum sealing (or, as I prefer, ziplock bagging and pressing out the air) is necessary in order to expose the food to the water more directly. Air is a pretty good insulator, so if it was in between the water and the food, it would prevent the food from getting to the temperature you want it to get to. The water is there because it has a&nbsp;very high specific heat, so it takes a lot of energy to change its temperature. This means it can keep a stable temperature and hold large amount of energy for transfer.</p>

<p>So, what&rsquo;s so great about this? Well, normally, most cooking techniques just blast heat at food in the attempt to sterilize it and give it an appealing texture. Unfortunately, these two goals are often at crossed purposes. To be safe, we normally heat food to a temperature that instantly kills the bacteria we&rsquo;re worried about &mdash; this ensures that it&rsquo;s safe, but often at the cost of taste and texture.&nbsp;Anyone who&rsquo;s eaten a very dry steak can tell you that absolutely-safely-cooked steak is not necessarily tasty steak.</p>

<p>Normally, it&rsquo;s a bit of an iffy proposition when skewing beneath the instant-kill temperature. Bacteria actually die off at lower temperatures than the recommended temperatures we&rsquo;re familiar with (160 &ndash; 165 degrees F for pork, and chicken, 145 degrees F for steak), but they do so gradually. If you cook at lower temperatures, safety requires good timing, which becomes potentially dangerous enough in the wrong hands that the FDA just always cites instant-kill temperatures.</p>

<p>With sous vide, you take the art (and potential food poisoning) out of the picture and add scientific precision. Sous vide machines are usually accurate enough that you know precisely what temperature the food has been at, and then it becomes a simple matter of looking up the amount of time to get to safety on a food pasteurization table. From there, you can have completely safe food (without blasted and barren texture), which, if you want more flavor/texture, you can apply judiciously without the necessity of hitting instant-kill temperature. For example, browning adds flavor through the mallaird reaction (which doesn&rsquo;t happen in sous vide). You can either use a food torch or just toss the steak/chicken/whatever onto a hot pan for a few seconds, keeping the internal texture while getting the browning. You can do sous vide with anything (even just a pot of water, a stove, thermometer, and a lot of patience), but in general machine controlled is better. I recently got a deep fryer at an estate sale that I&rsquo;m not confident in deep-frying in, but can heat water and sous vide with. Unfortunately, the low end of its temperature is still rather high (for sous vide) so I&rsquo;ll probably be experimenting with putting together my own setup soon.</p>
]]></content>
  </entry>
  
</feed>
